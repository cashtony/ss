/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 101 */
/* metalib md5sum: f8305675cf6b3330d5923f3f17b6f7be */

/* creation time: Thu Aug 18 18:14:29 2016 */
/* tdr version: 2.7.12, build at 20151212 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace GSProtocal
{


public class MACROS_GSPROTOCAL
{
 public const int MAX_TASK_LIST_NUM = 100;
 public const int MAX_GOT_THINGS = 10;

 /* macros in macrogroup CS_CMD_ID */
 public const int CS_TCONND_START = 1;
 public const int CS_TCONND_AUTH_REFRESH = 2;
 public const int CS_TCONND_RELAY = 3;
 public const int CS_TCONND_STOP = 4;
 public const int CS_LOST_CONNECTION = 5;
 public const int CS_SERVER_KICK = 11;
 public const int CS_SYN_TIME = 12;
 public const int CSC_TRANS_ANTI_DATA = 13; // transfer Anti data
 public const int CS_QUERY_RELOAD_TIME = 14;
 public const int CS_SERVER_RELOAD = 15;
 public const int CS_GET_TOKEN = 16;
 public const int CS_COMM_RESPONSE = 21;
 public const int CS_COMM_RESPONSE_1 = 22;
 public const int CS_COMM_RESPONSE_2 = 23;
 public const int CS_GET_ROLE_ID = 101;
 public const int CS_GET_ROLE = 102;
 public const int CS_CREATE_ROLE = 103;
 public const int CS_QUERY_NAME = 104;
 public const int CS_RESOURCE = 111;
 public const int CS_MONEY_INFO = 112;
 public const int CS_BAG_INFO = 113;
 public const int CS_REWARD_NOTIFY = 114;
 public const int CS_USE_ITEM = 121;
 public const int CS_SELL_ITEM = 122;
 public const int CS_COMPOSE_ITEM = 123;
 public const int CS_CHAT = 131;
 public const int CS_CHAT_NOTIFY = 132;
 public const int CS_MAIL_LIST = 141;
 public const int CS_MAIL_DEL = 142;
 public const int CS_MAIL_GET_EXT = 143;
 public const int CS_HERO_LIST = 201;
 public const int CS_CREATE_HERO = 202;
 public const int CS_HERO_INFO = 203;
 public const int CS_HERO_ADD_EXP = 204;
 public const int CS_HERO_ADD_RANK = 205;
 public const int CS_HERO_ADD_STAR = 206;
 public const int CS_HERO_ADD_SKILL = 207;
 public const int CS_EQUIP_INFO_LIST = 501; // 装备查询
 public const int CS_EQUIP_UPGRADE = 502; // 升级
 public const int CS_EQUIP_ADVANCE = 503; // 升阶
 public const int CS_EQUIP_REFINE = 504; // 升星
 public const int CS_EQUIP_DEREFINE = 505; // 降星
 public const int CS_MAX_CMD_ID = 3000;

 /* macros in macrogroup GROUP_CHAT_CHANEL */
 public const int CHAT_CHANEL_HORN = 1; // 喇叭频道
 public const int CHAT_CHANEL_WORLD = 2; // 世界频道
 public const int CHAT_CHANEL_SYS = 3; // 系统频道
 public const int CHAT_CHANEL_PERSON = 4; // 私聊频道
 public const int CHAT_CHANEL_UNION = 5; // 军团频道
 public const int CHAT_CHANEL_POP = 6; // 弹幕频道
}


public enum  CS_CMD_ID
{
 CS_TCONND_START = 1,
 CS_TCONND_AUTH_REFRESH = 2,
 CS_TCONND_RELAY = 3,
 CS_TCONND_STOP = 4,
 CS_LOST_CONNECTION = 5,
 CS_SERVER_KICK = 11,
 CS_SYN_TIME = 12,
 CSC_TRANS_ANTI_DATA = 13, // transfer Anti data
 CS_QUERY_RELOAD_TIME = 14,
 CS_SERVER_RELOAD = 15,
 CS_GET_TOKEN = 16,
 CS_COMM_RESPONSE = 21,
 CS_COMM_RESPONSE_1 = 22,
 CS_COMM_RESPONSE_2 = 23,
 CS_GET_ROLE_ID = 101,
 CS_GET_ROLE = 102,
 CS_CREATE_ROLE = 103,
 CS_QUERY_NAME = 104,
 CS_RESOURCE = 111,
 CS_MONEY_INFO = 112,
 CS_BAG_INFO = 113,
 CS_REWARD_NOTIFY = 114,
 CS_USE_ITEM = 121,
 CS_SELL_ITEM = 122,
 CS_COMPOSE_ITEM = 123,
 CS_CHAT = 131,
 CS_CHAT_NOTIFY = 132,
 CS_MAIL_LIST = 141,
 CS_MAIL_DEL = 142,
 CS_MAIL_GET_EXT = 143,
 CS_HERO_LIST = 201,
 CS_CREATE_HERO = 202,
 CS_HERO_INFO = 203,
 CS_HERO_ADD_EXP = 204,
 CS_HERO_ADD_RANK = 205,
 CS_HERO_ADD_STAR = 206,
 CS_HERO_ADD_SKILL = 207,
 CS_EQUIP_INFO_LIST = 501, // 装备查询
 CS_EQUIP_UPGRADE = 502, // 升级
 CS_EQUIP_ADVANCE = 503, // 升阶
 CS_EQUIP_REFINE = 504, // 升星
 CS_EQUIP_DEREFINE = 505, // 降星
 CS_MAX_CMD_ID = 3000,
}
public enum  GROUP_CHAT_CHANEL
{
 CHAT_CHANEL_HORN = 1, // 喇叭频道
 CHAT_CHANEL_WORLD = 2, // 世界频道
 CHAT_CHANEL_SYS = 3, // 系统频道
 CHAT_CHANEL_PERSON = 4, // 私聊频道
 CHAT_CHANEL_UNION = 5, // 军团频道
 CHAT_CHANEL_POP = 6, // 弹幕频道
}


/* 通用的key-value结构 */
public class KV : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iId; // id
 public Int32 iValue; // value

 /* construct methods */
 public KV()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || KV.CURRVERSION < cutVer)
  {
   cutVer = KV.CURRVERSION;
  }

  /* check cutversion */
  if (KV.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iId */
  {
   ret = destBuf.writeInt32(this.iId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iValue */
  {
   ret = destBuf.writeInt32(this.iValue);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || KV.CURRVERSION < cutVer)
  {
   cutVer = KV.CURRVERSION;
  }

  /* check cutversion */
  if (KV.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iId */
  {
   ret = srcBuf.readInt32(ref this.iId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iValue */
  {
   ret = srcBuf.readInt32(ref this.iValue);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || KV.CURRVERSION < cutVer)
  {
   cutVer = KV.CURRVERSION;
  }

  /* check cutversion */
  if (KV.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iId */
  {
   ret = srcBuf.readInt32(ref this.iId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iValue */
  {
   ret = srcBuf.readInt32(ref this.iValue);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iId]", "{0:d}", this.iId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iValue */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iValue]", "{0:d}", this.iValue);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 默认返回包，一般用于处理报错信息 */
public class SCGeneral : tsf4g_csharp_interface
{
 /* public members */
 public UInt16 wSrcCmdId; // 上行包命令字
 public Int16 nRet; // 命令执行返回值
 public UInt16 wClientOp; // 客户端处理方式:0 默认提示,1 提示并跳转到登陆页

 /* construct methods */
 public SCGeneral()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCGeneral.CURRVERSION < cutVer)
  {
   cutVer = SCGeneral.CURRVERSION;
  }

  /* check cutversion */
  if (SCGeneral.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.wSrcCmdId */
  {
   ret = destBuf.writeUInt16(this.wSrcCmdId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.nRet */
  {
   ret = destBuf.writeInt16(this.nRet);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.wClientOp */
  {
   ret = destBuf.writeUInt16(this.wClientOp);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCGeneral.CURRVERSION < cutVer)
  {
   cutVer = SCGeneral.CURRVERSION;
  }

  /* check cutversion */
  if (SCGeneral.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.wSrcCmdId */
  {
   ret = srcBuf.readUInt16(ref this.wSrcCmdId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.nRet */
  {
   ret = srcBuf.readInt16(ref this.nRet);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.wClientOp */
  {
   ret = srcBuf.readUInt16(ref this.wClientOp);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCGeneral.CURRVERSION < cutVer)
  {
   cutVer = SCGeneral.CURRVERSION;
  }

  /* check cutversion */
  if (SCGeneral.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.wSrcCmdId */
  {
   ret = srcBuf.readUInt16(ref this.wSrcCmdId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.nRet */
  {
   ret = srcBuf.readInt16(ref this.nRet);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.wClientOp */
  {
   ret = srcBuf.readUInt16(ref this.wClientOp);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.wSrcCmdId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[wSrcCmdId]", "{0:d}", this.wSrcCmdId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.nRet */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[nRet]", "{0:d}", this.nRet);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.wClientOp */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[wClientOp]", "{0:d}", this.wClientOp);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 默认请求包格式，用于不需要上行参数 */
public class CSCommRequest : tsf4g_csharp_interface
{
 /* public members */
 public sbyte chPreserved; // 保留

 /* construct methods */
 public CSCommRequest()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSCommRequest.CURRVERSION < cutVer)
  {
   cutVer = CSCommRequest.CURRVERSION;
  }

  /* check cutversion */
  if (CSCommRequest.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.chPreserved */
  {
   ret = destBuf.writeInt8(this.chPreserved);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSCommRequest.CURRVERSION < cutVer)
  {
   cutVer = CSCommRequest.CURRVERSION;
  }

  /* check cutversion */
  if (CSCommRequest.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.chPreserved */
  {
   ret = srcBuf.readInt8(ref this.chPreserved);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSCommRequest.CURRVERSION < cutVer)
  {
   cutVer = CSCommRequest.CURRVERSION;
  }

  /* check cutversion */
  if (CSCommRequest.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.chPreserved */
  {
   ret = srcBuf.readInt8(ref this.chPreserved);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.chPreserved */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[chPreserved]", "0x{0:x2}", this.chPreserved);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 默认应答包格式，只有返回值 */
public class SCCommResponse : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iRet; // 命令执行返回值

 /* construct methods */
 public SCCommResponse()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCCommResponse.CURRVERSION < cutVer)
  {
   cutVer = SCCommResponse.CURRVERSION;
  }

  /* check cutversion */
  if (SCCommResponse.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iRet */
  {
   ret = destBuf.writeInt32(this.iRet);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCCommResponse.CURRVERSION < cutVer)
  {
   cutVer = SCCommResponse.CURRVERSION;
  }

  /* check cutversion */
  if (SCCommResponse.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iRet */
  {
   ret = srcBuf.readInt32(ref this.iRet);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCCommResponse.CURRVERSION < cutVer)
  {
   cutVer = SCCommResponse.CURRVERSION;
  }

  /* check cutversion */
  if (SCCommResponse.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iRet */
  {
   ret = srcBuf.readInt32(ref this.iRet);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iRet */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iRet]", "{0:d}", this.iRet);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 通用返回包，带1参数 */
public class SCCommResponse1 : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iRet; // 命令执行返回值
 public UInt64 ullPara1; // 参数1，业务自定义

 /* construct methods */
 public SCCommResponse1()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCCommResponse1.CURRVERSION < cutVer)
  {
   cutVer = SCCommResponse1.CURRVERSION;
  }

  /* check cutversion */
  if (SCCommResponse1.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iRet */
  {
   ret = destBuf.writeInt32(this.iRet);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.ullPara1 */
  {
   ret = destBuf.writeUInt64(this.ullPara1);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCCommResponse1.CURRVERSION < cutVer)
  {
   cutVer = SCCommResponse1.CURRVERSION;
  }

  /* check cutversion */
  if (SCCommResponse1.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iRet */
  {
   ret = srcBuf.readInt32(ref this.iRet);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.ullPara1 */
  {
   ret = srcBuf.readUInt64(ref this.ullPara1);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCCommResponse1.CURRVERSION < cutVer)
  {
   cutVer = SCCommResponse1.CURRVERSION;
  }

  /* check cutversion */
  if (SCCommResponse1.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iRet */
  {
   ret = srcBuf.readInt32(ref this.iRet);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.ullPara1 */
  {
   ret = srcBuf.readUInt64(ref this.ullPara1);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iRet */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iRet]", "{0:d}", this.iRet);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.ullPara1 */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ullPara1]", "{0:d}", this.ullPara1);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 通用返回包，带2参数 */
public class SCCommResponse2 : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iRet; // 命令执行返回值
 public UInt64 ullPara1; // 参数1，业务自定义
 public UInt64 ullPara2; // 参数2，业务自定义

 /* construct methods */
 public SCCommResponse2()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCCommResponse2.CURRVERSION < cutVer)
  {
   cutVer = SCCommResponse2.CURRVERSION;
  }

  /* check cutversion */
  if (SCCommResponse2.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iRet */
  {
   ret = destBuf.writeInt32(this.iRet);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.ullPara1 */
  {
   ret = destBuf.writeUInt64(this.ullPara1);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.ullPara2 */
  {
   ret = destBuf.writeUInt64(this.ullPara2);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCCommResponse2.CURRVERSION < cutVer)
  {
   cutVer = SCCommResponse2.CURRVERSION;
  }

  /* check cutversion */
  if (SCCommResponse2.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iRet */
  {
   ret = srcBuf.readInt32(ref this.iRet);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.ullPara1 */
  {
   ret = srcBuf.readUInt64(ref this.ullPara1);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.ullPara2 */
  {
   ret = srcBuf.readUInt64(ref this.ullPara2);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCCommResponse2.CURRVERSION < cutVer)
  {
   cutVer = SCCommResponse2.CURRVERSION;
  }

  /* check cutversion */
  if (SCCommResponse2.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iRet */
  {
   ret = srcBuf.readInt32(ref this.iRet);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.ullPara1 */
  {
   ret = srcBuf.readUInt64(ref this.ullPara1);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.ullPara2 */
  {
   ret = srcBuf.readUInt64(ref this.ullPara2);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iRet */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iRet]", "{0:d}", this.iRet);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.ullPara1 */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ullPara1]", "{0:d}", this.ullPara1);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.ullPara2 */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ullPara2]", "{0:d}", this.ullPara2);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 同步时间 */
public class CSSynTime : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iReq; // 占位

 /* construct methods */
 public CSSynTime()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSSynTime.CURRVERSION < cutVer)
  {
   cutVer = CSSynTime.CURRVERSION;
  }

  /* check cutversion */
  if (CSSynTime.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iReq */
  {
   ret = destBuf.writeInt32(this.iReq);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSSynTime.CURRVERSION < cutVer)
  {
   cutVer = CSSynTime.CURRVERSION;
  }

  /* check cutversion */
  if (CSSynTime.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iReq */
  {
   ret = srcBuf.readInt32(ref this.iReq);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSSynTime.CURRVERSION < cutVer)
  {
   cutVer = CSSynTime.CURRVERSION;
  }

  /* check cutversion */
  if (CSSynTime.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iReq */
  {
   ret = srcBuf.readInt32(ref this.iReq);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iReq */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iReq]", "{0:d}", this.iReq);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 同步时间 */
public class SCSynTime : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iTime; // 当前时间
 public Int32 iInitTime; // 开服时间

 /* construct methods */
 public SCSynTime()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCSynTime.CURRVERSION < cutVer)
  {
   cutVer = SCSynTime.CURRVERSION;
  }

  /* check cutversion */
  if (SCSynTime.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iTime */
  {
   ret = destBuf.writeInt32(this.iTime);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iInitTime */
  {
   ret = destBuf.writeInt32(this.iInitTime);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCSynTime.CURRVERSION < cutVer)
  {
   cutVer = SCSynTime.CURRVERSION;
  }

  /* check cutversion */
  if (SCSynTime.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iTime */
  {
   ret = srcBuf.readInt32(ref this.iTime);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iInitTime */
  {
   ret = srcBuf.readInt32(ref this.iInitTime);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCSynTime.CURRVERSION < cutVer)
  {
   cutVer = SCSynTime.CURRVERSION;
  }

  /* check cutversion */
  if (SCSynTime.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iTime */
  {
   ret = srcBuf.readInt32(ref this.iTime);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iInitTime */
  {
   ret = srcBuf.readInt32(ref this.iInitTime);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iTime */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iTime]", "{0:d}", this.iTime);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iInitTime */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iInitTime]", "{0:d}", this.iInitTime);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* get token */
public class CSGetToken : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iPara; // 占位

 /* construct methods */
 public CSGetToken()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSGetToken.CURRVERSION < cutVer)
  {
   cutVer = CSGetToken.CURRVERSION;
  }

  /* check cutversion */
  if (CSGetToken.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iPara */
  {
   ret = destBuf.writeInt32(this.iPara);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSGetToken.CURRVERSION < cutVer)
  {
   cutVer = CSGetToken.CURRVERSION;
  }

  /* check cutversion */
  if (CSGetToken.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iPara */
  {
   ret = srcBuf.readInt32(ref this.iPara);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSGetToken.CURRVERSION < cutVer)
  {
   cutVer = CSGetToken.CURRVERSION;
  }

  /* check cutversion */
  if (CSGetToken.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iPara */
  {
   ret = srcBuf.readInt32(ref this.iPara);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iPara */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iPara]", "{0:d}", this.iPara);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* get token */
public class SCGetToken : tsf4g_csharp_interface
{
 /* public members */
 public byte[] szToken; // token

 /* construct methods */
 public SCGetToken()
 {
  szToken = new byte[64];
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCGetToken.CURRVERSION < cutVer)
  {
   cutVer = SCGetToken.CURRVERSION;
  }

  /* check cutversion */
  if (SCGetToken.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.szToken */
  {
   /* record sizeinfo position */
   Int32 sizePos4szToken = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szToken = destBuf.getUsedSize();

   Int32 realSize4szToken = TdrTypeUtil.cstrlen(this.szToken);

   if (realSize4szToken >= 64)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szToken, realSize4szToken);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szToken */
   Int32 size4szToken = destBuf.getUsedSize() - beginPos4szToken;
   ret = destBuf.writeUInt32((UInt32)(size4szToken), sizePos4szToken);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCGetToken.CURRVERSION < cutVer)
  {
   cutVer = SCGetToken.CURRVERSION;
  }

  /* check cutversion */
  if (SCGetToken.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.szToken */
  {
   /* get sizeinfo for this.szToken */
   UInt32 size4szToken = 0;
   ret = srcBuf.readUInt32(ref size4szToken);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szToken > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szToken > this.szToken.GetLength(0))
   {
    if ((int)size4szToken <= LENGTH_szToken)
    {
     this.szToken = new byte[size4szToken];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szToken)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szToken, (int)size4szToken);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szToken[(int)size4szToken - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szToken = TdrTypeUtil.cstrlen(this.szToken) + 1;
   if (size4szToken != realSize4szToken)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCGetToken.CURRVERSION < cutVer)
  {
   cutVer = SCGetToken.CURRVERSION;
  }

  /* check cutversion */
  if (SCGetToken.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.szToken */
  {
   Int32 size4szToken = 64;
   if (this.szToken.GetLength(0) < size4szToken)
   {
    this.szToken = new byte[LENGTH_szToken];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szToken, (int)size4szToken);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.szToken */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szToken]", this.szToken);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
 public static readonly uint LENGTH_szToken = 64;
}


/* 默认返回包 */
public class SCServerKick : tsf4g_csharp_interface
{
 /* public members */
 public Int16 nRet; // 命令执行返回值

 /* construct methods */
 public SCServerKick()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCServerKick.CURRVERSION < cutVer)
  {
   cutVer = SCServerKick.CURRVERSION;
  }

  /* check cutversion */
  if (SCServerKick.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.nRet */
  {
   ret = destBuf.writeInt16(this.nRet);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCServerKick.CURRVERSION < cutVer)
  {
   cutVer = SCServerKick.CURRVERSION;
  }

  /* check cutversion */
  if (SCServerKick.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.nRet */
  {
   ret = srcBuf.readInt16(ref this.nRet);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCServerKick.CURRVERSION < cutVer)
  {
   cutVer = SCServerKick.CURRVERSION;
  }

  /* check cutversion */
  if (SCServerKick.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.nRet */
  {
   ret = srcBuf.readInt16(ref this.nRet);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.nRet */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[nRet]", "{0:d}", this.nRet);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 登陆验证包 */
public class CSAuthentic : tsf4g_csharp_interface
{
 /* public members */
 public byte bSource; // 登陆来源

 /* construct methods */
 public CSAuthentic()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSAuthentic.CURRVERSION < cutVer)
  {
   cutVer = CSAuthentic.CURRVERSION;
  }

  /* check cutversion */
  if (CSAuthentic.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.bSource */
  {
   ret = destBuf.writeUInt8(this.bSource);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSAuthentic.CURRVERSION < cutVer)
  {
   cutVer = CSAuthentic.CURRVERSION;
  }

  /* check cutversion */
  if (CSAuthentic.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.bSource */
  {
   ret = srcBuf.readUInt8(ref this.bSource);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSAuthentic.CURRVERSION < cutVer)
  {
   cutVer = CSAuthentic.CURRVERSION;
  }

  /* check cutversion */
  if (CSAuthentic.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.bSource */
  {
   ret = srcBuf.readUInt8(ref this.bSource);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.bSource */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bSource]", "0x{0:x2}", this.bSource);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 登陆验证返回包 */
public class SCAuthentic : tsf4g_csharp_interface
{
 /* public members */
 public Int16 nRet; // 命令执行返回值

 /* construct methods */
 public SCAuthentic()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCAuthentic.CURRVERSION < cutVer)
  {
   cutVer = SCAuthentic.CURRVERSION;
  }

  /* check cutversion */
  if (SCAuthentic.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.nRet */
  {
   ret = destBuf.writeInt16(this.nRet);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCAuthentic.CURRVERSION < cutVer)
  {
   cutVer = SCAuthentic.CURRVERSION;
  }

  /* check cutversion */
  if (SCAuthentic.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.nRet */
  {
   ret = srcBuf.readInt16(ref this.nRet);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCAuthentic.CURRVERSION < cutVer)
  {
   cutVer = SCAuthentic.CURRVERSION;
  }

  /* check cutversion */
  if (SCAuthentic.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.nRet */
  {
   ret = srcBuf.readInt16(ref this.nRet);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.nRet */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[nRet]", "{0:d}", this.nRet);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* query reload time */
public class CSQueryReloadTime : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iPara; // preserved

 /* construct methods */
 public CSQueryReloadTime()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSQueryReloadTime.CURRVERSION < cutVer)
  {
   cutVer = CSQueryReloadTime.CURRVERSION;
  }

  /* check cutversion */
  if (CSQueryReloadTime.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iPara */
  {
   ret = destBuf.writeInt32(this.iPara);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSQueryReloadTime.CURRVERSION < cutVer)
  {
   cutVer = CSQueryReloadTime.CURRVERSION;
  }

  /* check cutversion */
  if (CSQueryReloadTime.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iPara */
  {
   ret = srcBuf.readInt32(ref this.iPara);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSQueryReloadTime.CURRVERSION < cutVer)
  {
   cutVer = CSQueryReloadTime.CURRVERSION;
  }

  /* check cutversion */
  if (CSQueryReloadTime.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iPara */
  {
   ret = srcBuf.readInt32(ref this.iPara);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iPara */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iPara]", "{0:d}", this.iPara);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* query reload time */
public class SCQueryReloadTime : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iReloadTime; // reload time
 public Int32 iPara; // preserved

 /* construct methods */
 public SCQueryReloadTime()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCQueryReloadTime.CURRVERSION < cutVer)
  {
   cutVer = SCQueryReloadTime.CURRVERSION;
  }

  /* check cutversion */
  if (SCQueryReloadTime.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iReloadTime */
  {
   ret = destBuf.writeInt32(this.iReloadTime);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iPara */
  {
   ret = destBuf.writeInt32(this.iPara);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCQueryReloadTime.CURRVERSION < cutVer)
  {
   cutVer = SCQueryReloadTime.CURRVERSION;
  }

  /* check cutversion */
  if (SCQueryReloadTime.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iReloadTime */
  {
   ret = srcBuf.readInt32(ref this.iReloadTime);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iPara */
  {
   ret = srcBuf.readInt32(ref this.iPara);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCQueryReloadTime.CURRVERSION < cutVer)
  {
   cutVer = SCQueryReloadTime.CURRVERSION;
  }

  /* check cutversion */
  if (SCQueryReloadTime.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iReloadTime */
  {
   ret = srcBuf.readInt32(ref this.iReloadTime);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iPara */
  {
   ret = srcBuf.readInt32(ref this.iPara);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iReloadTime */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iReloadTime]", "{0:d}", this.iReloadTime);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iPara */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iPara]", "{0:d}", this.iPara);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* server reload */
public class SCServerReload : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iReloadTime; // reload time
 public Int32 iPara; // preserved

 /* construct methods */
 public SCServerReload()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCServerReload.CURRVERSION < cutVer)
  {
   cutVer = SCServerReload.CURRVERSION;
  }

  /* check cutversion */
  if (SCServerReload.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iReloadTime */
  {
   ret = destBuf.writeInt32(this.iReloadTime);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iPara */
  {
   ret = destBuf.writeInt32(this.iPara);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCServerReload.CURRVERSION < cutVer)
  {
   cutVer = SCServerReload.CURRVERSION;
  }

  /* check cutversion */
  if (SCServerReload.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iReloadTime */
  {
   ret = srcBuf.readInt32(ref this.iReloadTime);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iPara */
  {
   ret = srcBuf.readInt32(ref this.iPara);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCServerReload.CURRVERSION < cutVer)
  {
   cutVer = SCServerReload.CURRVERSION;
  }

  /* check cutversion */
  if (SCServerReload.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iReloadTime */
  {
   ret = srcBuf.readInt32(ref this.iReloadTime);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iPara */
  {
   ret = srcBuf.readInt32(ref this.iPara);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iReloadTime */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iReloadTime]", "{0:d}", this.iReloadTime);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iPara */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iPara]", "{0:d}", this.iPara);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 客户端信息 */
public class DeviceInfo : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iProtocolVersion; // 协议版本号
 public Int32 iClientVersion; // 客户端版本
 public byte[] szSystemSoftware; // 移动终端操作系统版本
 public byte[] szSystemHardware; // 移动终端机型
 public byte[] szTelecomOper; // 运营商
 public byte[] szNetwork; // 3G/WIFI/2G
 public Int32 iScreenWidth; // 显示屏宽度
 public Int32 iScreenHight; // 显示屏高度
 public float fDensity; // 像素密度
 public byte[] szCpuHardware; // cpu类型|频率|核数
 public Int32 iMemory; // 内存信息单位M
 public byte[] szGLRender; // opengl render信息
 public byte[] szGLVersion; // opengl版本信息
 public byte[] szDeviceId; // 设备ID

 /* construct methods */
 public DeviceInfo()
 {
  szSystemSoftware = new byte[20];
  szSystemHardware = new byte[20];
  szTelecomOper = new byte[10];
  szNetwork = new byte[10];
  szCpuHardware = new byte[20];
  szGLRender = new byte[20];
  szGLVersion = new byte[20];
  szDeviceId = new byte[48];
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  this.iProtocolVersion = 0;

  this.iClientVersion = 0;

  string szSystemSoftware_def = "NULL";
  byte []szSystemSoftware_tmp = Encoding.ASCII.GetBytes(szSystemSoftware_def);
  if (szSystemSoftware_tmp.GetLength(0) + 1 > this.szSystemSoftware.GetLength(0))
  {
   if (szSystemSoftware_tmp.GetLength(0) < LENGTH_szSystemSoftware)
   {
    this.szSystemSoftware = new byte[szSystemSoftware_tmp.GetLength(0) + 1];
   }
   else
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }
  }

  for(int i = 0;i < szSystemSoftware_tmp.GetLength(0); i++)
  {
   this.szSystemSoftware[i] = szSystemSoftware_tmp[i];
  }
  this.szSystemSoftware[szSystemSoftware_tmp.GetLength(0)] = 0x00;

  string szSystemHardware_def = "NULL";
  byte []szSystemHardware_tmp = Encoding.ASCII.GetBytes(szSystemHardware_def);
  if (szSystemHardware_tmp.GetLength(0) + 1 > this.szSystemHardware.GetLength(0))
  {
   if (szSystemHardware_tmp.GetLength(0) < LENGTH_szSystemHardware)
   {
    this.szSystemHardware = new byte[szSystemHardware_tmp.GetLength(0) + 1];
   }
   else
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }
  }

  for(int i = 0;i < szSystemHardware_tmp.GetLength(0); i++)
  {
   this.szSystemHardware[i] = szSystemHardware_tmp[i];
  }
  this.szSystemHardware[szSystemHardware_tmp.GetLength(0)] = 0x00;

  string szTelecomOper_def = "NULL";
  byte []szTelecomOper_tmp = Encoding.ASCII.GetBytes(szTelecomOper_def);
  if (szTelecomOper_tmp.GetLength(0) + 1 > this.szTelecomOper.GetLength(0))
  {
   if (szTelecomOper_tmp.GetLength(0) < LENGTH_szTelecomOper)
   {
    this.szTelecomOper = new byte[szTelecomOper_tmp.GetLength(0) + 1];
   }
   else
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }
  }

  for(int i = 0;i < szTelecomOper_tmp.GetLength(0); i++)
  {
   this.szTelecomOper[i] = szTelecomOper_tmp[i];
  }
  this.szTelecomOper[szTelecomOper_tmp.GetLength(0)] = 0x00;

  string szNetwork_def = "NULL";
  byte []szNetwork_tmp = Encoding.ASCII.GetBytes(szNetwork_def);
  if (szNetwork_tmp.GetLength(0) + 1 > this.szNetwork.GetLength(0))
  {
   if (szNetwork_tmp.GetLength(0) < LENGTH_szNetwork)
   {
    this.szNetwork = new byte[szNetwork_tmp.GetLength(0) + 1];
   }
   else
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }
  }

  for(int i = 0;i < szNetwork_tmp.GetLength(0); i++)
  {
   this.szNetwork[i] = szNetwork_tmp[i];
  }
  this.szNetwork[szNetwork_tmp.GetLength(0)] = 0x00;

  this.iScreenWidth = 0;

  this.iScreenHight = 0;

  this.fDensity = 0;

  string szCpuHardware_def = "NULL";
  byte []szCpuHardware_tmp = Encoding.ASCII.GetBytes(szCpuHardware_def);
  if (szCpuHardware_tmp.GetLength(0) + 1 > this.szCpuHardware.GetLength(0))
  {
   if (szCpuHardware_tmp.GetLength(0) < LENGTH_szCpuHardware)
   {
    this.szCpuHardware = new byte[szCpuHardware_tmp.GetLength(0) + 1];
   }
   else
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }
  }

  for(int i = 0;i < szCpuHardware_tmp.GetLength(0); i++)
  {
   this.szCpuHardware[i] = szCpuHardware_tmp[i];
  }
  this.szCpuHardware[szCpuHardware_tmp.GetLength(0)] = 0x00;

  this.iMemory = 0;

  string szGLRender_def = "NULL";
  byte []szGLRender_tmp = Encoding.ASCII.GetBytes(szGLRender_def);
  if (szGLRender_tmp.GetLength(0) + 1 > this.szGLRender.GetLength(0))
  {
   if (szGLRender_tmp.GetLength(0) < LENGTH_szGLRender)
   {
    this.szGLRender = new byte[szGLRender_tmp.GetLength(0) + 1];
   }
   else
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }
  }

  for(int i = 0;i < szGLRender_tmp.GetLength(0); i++)
  {
   this.szGLRender[i] = szGLRender_tmp[i];
  }
  this.szGLRender[szGLRender_tmp.GetLength(0)] = 0x00;

  string szGLVersion_def = "NULL";
  byte []szGLVersion_tmp = Encoding.ASCII.GetBytes(szGLVersion_def);
  if (szGLVersion_tmp.GetLength(0) + 1 > this.szGLVersion.GetLength(0))
  {
   if (szGLVersion_tmp.GetLength(0) < LENGTH_szGLVersion)
   {
    this.szGLVersion = new byte[szGLVersion_tmp.GetLength(0) + 1];
   }
   else
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }
  }

  for(int i = 0;i < szGLVersion_tmp.GetLength(0); i++)
  {
   this.szGLVersion[i] = szGLVersion_tmp[i];
  }
  this.szGLVersion[szGLVersion_tmp.GetLength(0)] = 0x00;

  string szDeviceId_def = "NULL";
  byte []szDeviceId_tmp = Encoding.ASCII.GetBytes(szDeviceId_def);
  if (szDeviceId_tmp.GetLength(0) + 1 > this.szDeviceId.GetLength(0))
  {
   if (szDeviceId_tmp.GetLength(0) < LENGTH_szDeviceId)
   {
    this.szDeviceId = new byte[szDeviceId_tmp.GetLength(0) + 1];
   }
   else
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }
  }

  for(int i = 0;i < szDeviceId_tmp.GetLength(0); i++)
  {
   this.szDeviceId[i] = szDeviceId_tmp[i];
  }
  this.szDeviceId[szDeviceId_tmp.GetLength(0)] = 0x00;

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || DeviceInfo.CURRVERSION < cutVer)
  {
   cutVer = DeviceInfo.CURRVERSION;
  }

  /* check cutversion */
  if (DeviceInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iProtocolVersion */
  {
   ret = destBuf.writeInt32(this.iProtocolVersion);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iClientVersion */
  {
   ret = destBuf.writeInt32(this.iClientVersion);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.szSystemSoftware */
  {
   /* record sizeinfo position */
   Int32 sizePos4szSystemSoftware = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szSystemSoftware = destBuf.getUsedSize();

   Int32 realSize4szSystemSoftware = TdrTypeUtil.cstrlen(this.szSystemSoftware);

   if (realSize4szSystemSoftware >= 20)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szSystemSoftware, realSize4szSystemSoftware);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szSystemSoftware */
   Int32 size4szSystemSoftware = destBuf.getUsedSize() - beginPos4szSystemSoftware;
   ret = destBuf.writeUInt32((UInt32)(size4szSystemSoftware), sizePos4szSystemSoftware);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.szSystemHardware */
  {
   /* record sizeinfo position */
   Int32 sizePos4szSystemHardware = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szSystemHardware = destBuf.getUsedSize();

   Int32 realSize4szSystemHardware = TdrTypeUtil.cstrlen(this.szSystemHardware);

   if (realSize4szSystemHardware >= 20)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szSystemHardware, realSize4szSystemHardware);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szSystemHardware */
   Int32 size4szSystemHardware = destBuf.getUsedSize() - beginPos4szSystemHardware;
   ret = destBuf.writeUInt32((UInt32)(size4szSystemHardware), sizePos4szSystemHardware);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.szTelecomOper */
  {
   /* record sizeinfo position */
   Int32 sizePos4szTelecomOper = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szTelecomOper = destBuf.getUsedSize();

   Int32 realSize4szTelecomOper = TdrTypeUtil.cstrlen(this.szTelecomOper);

   if (realSize4szTelecomOper >= 10)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szTelecomOper, realSize4szTelecomOper);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szTelecomOper */
   Int32 size4szTelecomOper = destBuf.getUsedSize() - beginPos4szTelecomOper;
   ret = destBuf.writeUInt32((UInt32)(size4szTelecomOper), sizePos4szTelecomOper);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.szNetwork */
  {
   /* record sizeinfo position */
   Int32 sizePos4szNetwork = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szNetwork = destBuf.getUsedSize();

   Int32 realSize4szNetwork = TdrTypeUtil.cstrlen(this.szNetwork);

   if (realSize4szNetwork >= 10)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szNetwork, realSize4szNetwork);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szNetwork */
   Int32 size4szNetwork = destBuf.getUsedSize() - beginPos4szNetwork;
   ret = destBuf.writeUInt32((UInt32)(size4szNetwork), sizePos4szNetwork);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iScreenWidth */
  {
   ret = destBuf.writeInt32(this.iScreenWidth);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iScreenHight */
  {
   ret = destBuf.writeInt32(this.iScreenHight);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.fDensity */
  {
   ret = destBuf.writeFloat(this.fDensity);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.szCpuHardware */
  {
   /* record sizeinfo position */
   Int32 sizePos4szCpuHardware = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szCpuHardware = destBuf.getUsedSize();

   Int32 realSize4szCpuHardware = TdrTypeUtil.cstrlen(this.szCpuHardware);

   if (realSize4szCpuHardware >= 20)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szCpuHardware, realSize4szCpuHardware);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szCpuHardware */
   Int32 size4szCpuHardware = destBuf.getUsedSize() - beginPos4szCpuHardware;
   ret = destBuf.writeUInt32((UInt32)(size4szCpuHardware), sizePos4szCpuHardware);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iMemory */
  {
   ret = destBuf.writeInt32(this.iMemory);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.szGLRender */
  {
   /* record sizeinfo position */
   Int32 sizePos4szGLRender = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szGLRender = destBuf.getUsedSize();

   Int32 realSize4szGLRender = TdrTypeUtil.cstrlen(this.szGLRender);

   if (realSize4szGLRender >= 20)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szGLRender, realSize4szGLRender);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szGLRender */
   Int32 size4szGLRender = destBuf.getUsedSize() - beginPos4szGLRender;
   ret = destBuf.writeUInt32((UInt32)(size4szGLRender), sizePos4szGLRender);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.szGLVersion */
  {
   /* record sizeinfo position */
   Int32 sizePos4szGLVersion = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szGLVersion = destBuf.getUsedSize();

   Int32 realSize4szGLVersion = TdrTypeUtil.cstrlen(this.szGLVersion);

   if (realSize4szGLVersion >= 20)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szGLVersion, realSize4szGLVersion);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szGLVersion */
   Int32 size4szGLVersion = destBuf.getUsedSize() - beginPos4szGLVersion;
   ret = destBuf.writeUInt32((UInt32)(size4szGLVersion), sizePos4szGLVersion);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.szDeviceId */
  {
   /* record sizeinfo position */
   Int32 sizePos4szDeviceId = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szDeviceId = destBuf.getUsedSize();

   Int32 realSize4szDeviceId = TdrTypeUtil.cstrlen(this.szDeviceId);

   if (realSize4szDeviceId >= 48)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szDeviceId, realSize4szDeviceId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szDeviceId */
   Int32 size4szDeviceId = destBuf.getUsedSize() - beginPos4szDeviceId;
   ret = destBuf.writeUInt32((UInt32)(size4szDeviceId), sizePos4szDeviceId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || DeviceInfo.CURRVERSION < cutVer)
  {
   cutVer = DeviceInfo.CURRVERSION;
  }

  /* check cutversion */
  if (DeviceInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iProtocolVersion */
  {
   ret = srcBuf.readInt32(ref this.iProtocolVersion);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iClientVersion */
  {
   ret = srcBuf.readInt32(ref this.iClientVersion);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.szSystemSoftware */
  {
   /* get sizeinfo for this.szSystemSoftware */
   UInt32 size4szSystemSoftware = 0;
   ret = srcBuf.readUInt32(ref size4szSystemSoftware);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szSystemSoftware > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szSystemSoftware > this.szSystemSoftware.GetLength(0))
   {
    if ((int)size4szSystemSoftware <= LENGTH_szSystemSoftware)
    {
     this.szSystemSoftware = new byte[size4szSystemSoftware];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szSystemSoftware)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szSystemSoftware, (int)size4szSystemSoftware);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szSystemSoftware[(int)size4szSystemSoftware - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szSystemSoftware = TdrTypeUtil.cstrlen(this.szSystemSoftware) + 1;
   if (size4szSystemSoftware != realSize4szSystemSoftware)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  /* unpack member: this.szSystemHardware */
  {
   /* get sizeinfo for this.szSystemHardware */
   UInt32 size4szSystemHardware = 0;
   ret = srcBuf.readUInt32(ref size4szSystemHardware);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szSystemHardware > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szSystemHardware > this.szSystemHardware.GetLength(0))
   {
    if ((int)size4szSystemHardware <= LENGTH_szSystemHardware)
    {
     this.szSystemHardware = new byte[size4szSystemHardware];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szSystemHardware)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szSystemHardware, (int)size4szSystemHardware);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szSystemHardware[(int)size4szSystemHardware - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szSystemHardware = TdrTypeUtil.cstrlen(this.szSystemHardware) + 1;
   if (size4szSystemHardware != realSize4szSystemHardware)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  /* unpack member: this.szTelecomOper */
  {
   /* get sizeinfo for this.szTelecomOper */
   UInt32 size4szTelecomOper = 0;
   ret = srcBuf.readUInt32(ref size4szTelecomOper);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szTelecomOper > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szTelecomOper > this.szTelecomOper.GetLength(0))
   {
    if ((int)size4szTelecomOper <= LENGTH_szTelecomOper)
    {
     this.szTelecomOper = new byte[size4szTelecomOper];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szTelecomOper)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szTelecomOper, (int)size4szTelecomOper);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szTelecomOper[(int)size4szTelecomOper - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szTelecomOper = TdrTypeUtil.cstrlen(this.szTelecomOper) + 1;
   if (size4szTelecomOper != realSize4szTelecomOper)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  /* unpack member: this.szNetwork */
  {
   /* get sizeinfo for this.szNetwork */
   UInt32 size4szNetwork = 0;
   ret = srcBuf.readUInt32(ref size4szNetwork);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szNetwork > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szNetwork > this.szNetwork.GetLength(0))
   {
    if ((int)size4szNetwork <= LENGTH_szNetwork)
    {
     this.szNetwork = new byte[size4szNetwork];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szNetwork)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szNetwork, (int)size4szNetwork);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szNetwork[(int)size4szNetwork - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szNetwork = TdrTypeUtil.cstrlen(this.szNetwork) + 1;
   if (size4szNetwork != realSize4szNetwork)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  /* unpack member: this.iScreenWidth */
  {
   ret = srcBuf.readInt32(ref this.iScreenWidth);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iScreenHight */
  {
   ret = srcBuf.readInt32(ref this.iScreenHight);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.fDensity */
  {
   ret = srcBuf.readFloat(ref this.fDensity);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.szCpuHardware */
  {
   /* get sizeinfo for this.szCpuHardware */
   UInt32 size4szCpuHardware = 0;
   ret = srcBuf.readUInt32(ref size4szCpuHardware);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szCpuHardware > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szCpuHardware > this.szCpuHardware.GetLength(0))
   {
    if ((int)size4szCpuHardware <= LENGTH_szCpuHardware)
    {
     this.szCpuHardware = new byte[size4szCpuHardware];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szCpuHardware)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szCpuHardware, (int)size4szCpuHardware);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szCpuHardware[(int)size4szCpuHardware - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szCpuHardware = TdrTypeUtil.cstrlen(this.szCpuHardware) + 1;
   if (size4szCpuHardware != realSize4szCpuHardware)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  /* unpack member: this.iMemory */
  {
   ret = srcBuf.readInt32(ref this.iMemory);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.szGLRender */
  {
   /* get sizeinfo for this.szGLRender */
   UInt32 size4szGLRender = 0;
   ret = srcBuf.readUInt32(ref size4szGLRender);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szGLRender > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szGLRender > this.szGLRender.GetLength(0))
   {
    if ((int)size4szGLRender <= LENGTH_szGLRender)
    {
     this.szGLRender = new byte[size4szGLRender];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szGLRender)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szGLRender, (int)size4szGLRender);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szGLRender[(int)size4szGLRender - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szGLRender = TdrTypeUtil.cstrlen(this.szGLRender) + 1;
   if (size4szGLRender != realSize4szGLRender)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  /* unpack member: this.szGLVersion */
  {
   /* get sizeinfo for this.szGLVersion */
   UInt32 size4szGLVersion = 0;
   ret = srcBuf.readUInt32(ref size4szGLVersion);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szGLVersion > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szGLVersion > this.szGLVersion.GetLength(0))
   {
    if ((int)size4szGLVersion <= LENGTH_szGLVersion)
    {
     this.szGLVersion = new byte[size4szGLVersion];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szGLVersion)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szGLVersion, (int)size4szGLVersion);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szGLVersion[(int)size4szGLVersion - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szGLVersion = TdrTypeUtil.cstrlen(this.szGLVersion) + 1;
   if (size4szGLVersion != realSize4szGLVersion)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  /* unpack member: this.szDeviceId */
  {
   /* get sizeinfo for this.szDeviceId */
   UInt32 size4szDeviceId = 0;
   ret = srcBuf.readUInt32(ref size4szDeviceId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szDeviceId > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szDeviceId > this.szDeviceId.GetLength(0))
   {
    if ((int)size4szDeviceId <= LENGTH_szDeviceId)
    {
     this.szDeviceId = new byte[size4szDeviceId];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szDeviceId)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szDeviceId, (int)size4szDeviceId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szDeviceId[(int)size4szDeviceId - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szDeviceId = TdrTypeUtil.cstrlen(this.szDeviceId) + 1;
   if (size4szDeviceId != realSize4szDeviceId)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || DeviceInfo.CURRVERSION < cutVer)
  {
   cutVer = DeviceInfo.CURRVERSION;
  }

  /* check cutversion */
  if (DeviceInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iProtocolVersion */
  {
   ret = srcBuf.readInt32(ref this.iProtocolVersion);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iClientVersion */
  {
   ret = srcBuf.readInt32(ref this.iClientVersion);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.szSystemSoftware */
  {
   Int32 size4szSystemSoftware = 20;
   if (this.szSystemSoftware.GetLength(0) < size4szSystemSoftware)
   {
    this.szSystemSoftware = new byte[LENGTH_szSystemSoftware];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szSystemSoftware, (int)size4szSystemSoftware);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  /* load member: this.szSystemHardware */
  {
   Int32 size4szSystemHardware = 20;
   if (this.szSystemHardware.GetLength(0) < size4szSystemHardware)
   {
    this.szSystemHardware = new byte[LENGTH_szSystemHardware];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szSystemHardware, (int)size4szSystemHardware);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  /* load member: this.szTelecomOper */
  {
   Int32 size4szTelecomOper = 10;
   if (this.szTelecomOper.GetLength(0) < size4szTelecomOper)
   {
    this.szTelecomOper = new byte[LENGTH_szTelecomOper];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szTelecomOper, (int)size4szTelecomOper);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  /* load member: this.szNetwork */
  {
   Int32 size4szNetwork = 10;
   if (this.szNetwork.GetLength(0) < size4szNetwork)
   {
    this.szNetwork = new byte[LENGTH_szNetwork];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szNetwork, (int)size4szNetwork);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  /* load member: this.iScreenWidth */
  {
   ret = srcBuf.readInt32(ref this.iScreenWidth);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iScreenHight */
  {
   ret = srcBuf.readInt32(ref this.iScreenHight);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.fDensity */
  {
   ret = srcBuf.readFloat(ref this.fDensity);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.szCpuHardware */
  {
   Int32 size4szCpuHardware = 20;
   if (this.szCpuHardware.GetLength(0) < size4szCpuHardware)
   {
    this.szCpuHardware = new byte[LENGTH_szCpuHardware];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szCpuHardware, (int)size4szCpuHardware);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  /* load member: this.iMemory */
  {
   ret = srcBuf.readInt32(ref this.iMemory);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.szGLRender */
  {
   Int32 size4szGLRender = 20;
   if (this.szGLRender.GetLength(0) < size4szGLRender)
   {
    this.szGLRender = new byte[LENGTH_szGLRender];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szGLRender, (int)size4szGLRender);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  /* load member: this.szGLVersion */
  {
   Int32 size4szGLVersion = 20;
   if (this.szGLVersion.GetLength(0) < size4szGLVersion)
   {
    this.szGLVersion = new byte[LENGTH_szGLVersion];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szGLVersion, (int)size4szGLVersion);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  /* load member: this.szDeviceId */
  {
   Int32 size4szDeviceId = 48;
   if (this.szDeviceId.GetLength(0) < size4szDeviceId)
   {
    this.szDeviceId = new byte[LENGTH_szDeviceId];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szDeviceId, (int)size4szDeviceId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iProtocolVersion */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iProtocolVersion]", "{0:d}", this.iProtocolVersion);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iClientVersion */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iClientVersion]", "{0:d}", this.iClientVersion);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.szSystemSoftware */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szSystemSoftware]", this.szSystemSoftware);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.szSystemHardware */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szSystemHardware]", this.szSystemHardware);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.szTelecomOper */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szTelecomOper]", this.szTelecomOper);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.szNetwork */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szNetwork]", this.szNetwork);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iScreenWidth */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iScreenWidth]", "{0:d}", this.iScreenWidth);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iScreenHight */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iScreenHight]", "{0:d}", this.iScreenHight);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.fDensity */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[fDensity]", "{0:g}", this.fDensity);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.szCpuHardware */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szCpuHardware]", this.szCpuHardware);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iMemory */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iMemory]", "{0:d}", this.iMemory);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.szGLRender */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szGLRender]", this.szGLRender);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.szGLVersion */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szGLVersion]", this.szGLVersion);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.szDeviceId */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szDeviceId]", this.szDeviceId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
 public static readonly uint LENGTH_szSystemSoftware = 20;
 public static readonly uint LENGTH_szSystemHardware = 20;
 public static readonly uint LENGTH_szTelecomOper = 10;
 public static readonly uint LENGTH_szNetwork = 10;
 public static readonly uint LENGTH_szCpuHardware = 20;
 public static readonly uint LENGTH_szGLRender = 20;
 public static readonly uint LENGTH_szGLVersion = 20;
 public static readonly uint LENGTH_szDeviceId = 48;
}


public class SCRoleID : tsf4g_csharp_interface
{
 /* public members */
 public UInt64 ullRoleId; // 0:not create yet

 /* construct methods */
 public SCRoleID()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCRoleID.CURRVERSION < cutVer)
  {
   cutVer = SCRoleID.CURRVERSION;
  }

  /* check cutversion */
  if (SCRoleID.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.ullRoleId */
  {
   ret = destBuf.writeUInt64(this.ullRoleId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCRoleID.CURRVERSION < cutVer)
  {
   cutVer = SCRoleID.CURRVERSION;
  }

  /* check cutversion */
  if (SCRoleID.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.ullRoleId */
  {
   ret = srcBuf.readUInt64(ref this.ullRoleId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCRoleID.CURRVERSION < cutVer)
  {
   cutVer = SCRoleID.CURRVERSION;
  }

  /* check cutversion */
  if (SCRoleID.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.ullRoleId */
  {
   ret = srcBuf.readUInt64(ref this.ullRoleId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.ullRoleId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ullRoleId]", "{0:d}", this.ullRoleId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 登陆游戏 */
public class CSGetRole : tsf4g_csharp_interface
{
 /* public members */
 public UInt16 wZoneId; // 分区ID
 public byte[] szPf; // MSDK pf
 public byte[] szPfKey; // MSDK pfKey
 public byte[] szPayToken; // MSDK paytoken
 public byte[] szLoginChannel; // LoginChannel
 public DeviceInfo stDeviceInfo; // 客户端信息

 /* construct methods */
 public CSGetRole()
 {
  szPf = new byte[128];
  szPfKey = new byte[128];
  szPayToken = new byte[256];
  szLoginChannel = new byte[128];
  stDeviceInfo = new DeviceInfo();
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  this.wZoneId = 0;

  /* this.szPf have no defaultvalue */

  /* this.szPfKey have no defaultvalue */

  /* this.szPayToken have no defaultvalue */

  /* this.szLoginChannel have no defaultvalue */

  ret = this.stDeviceInfo.construct();
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSGetRole.CURRVERSION < cutVer)
  {
   cutVer = CSGetRole.CURRVERSION;
  }

  /* check cutversion */
  if (CSGetRole.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.wZoneId */
  {
   ret = destBuf.writeUInt16(this.wZoneId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.szPf */
  {
   /* record sizeinfo position */
   Int32 sizePos4szPf = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szPf = destBuf.getUsedSize();

   Int32 realSize4szPf = TdrTypeUtil.cstrlen(this.szPf);

   if (realSize4szPf >= 128)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szPf, realSize4szPf);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szPf */
   Int32 size4szPf = destBuf.getUsedSize() - beginPos4szPf;
   ret = destBuf.writeUInt32((UInt32)(size4szPf), sizePos4szPf);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.szPfKey */
  {
   /* record sizeinfo position */
   Int32 sizePos4szPfKey = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szPfKey = destBuf.getUsedSize();

   Int32 realSize4szPfKey = TdrTypeUtil.cstrlen(this.szPfKey);

   if (realSize4szPfKey >= 128)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szPfKey, realSize4szPfKey);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szPfKey */
   Int32 size4szPfKey = destBuf.getUsedSize() - beginPos4szPfKey;
   ret = destBuf.writeUInt32((UInt32)(size4szPfKey), sizePos4szPfKey);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.szPayToken */
  {
   /* record sizeinfo position */
   Int32 sizePos4szPayToken = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szPayToken = destBuf.getUsedSize();

   Int32 realSize4szPayToken = TdrTypeUtil.cstrlen(this.szPayToken);

   if (realSize4szPayToken >= 256)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szPayToken, realSize4szPayToken);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szPayToken */
   Int32 size4szPayToken = destBuf.getUsedSize() - beginPos4szPayToken;
   ret = destBuf.writeUInt32((UInt32)(size4szPayToken), sizePos4szPayToken);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.szLoginChannel */
  {
   /* record sizeinfo position */
   Int32 sizePos4szLoginChannel = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szLoginChannel = destBuf.getUsedSize();

   Int32 realSize4szLoginChannel = TdrTypeUtil.cstrlen(this.szLoginChannel);

   if (realSize4szLoginChannel >= 128)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szLoginChannel, realSize4szLoginChannel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szLoginChannel */
   Int32 size4szLoginChannel = destBuf.getUsedSize() - beginPos4szLoginChannel;
   ret = destBuf.writeUInt32((UInt32)(size4szLoginChannel), sizePos4szLoginChannel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.stDeviceInfo */
  {
   ret = this.stDeviceInfo.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSGetRole.CURRVERSION < cutVer)
  {
   cutVer = CSGetRole.CURRVERSION;
  }

  /* check cutversion */
  if (CSGetRole.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.wZoneId */
  {
   ret = srcBuf.readUInt16(ref this.wZoneId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.szPf */
  {
   /* get sizeinfo for this.szPf */
   UInt32 size4szPf = 0;
   ret = srcBuf.readUInt32(ref size4szPf);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szPf > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szPf > this.szPf.GetLength(0))
   {
    if ((int)size4szPf <= LENGTH_szPf)
    {
     this.szPf = new byte[size4szPf];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szPf)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szPf, (int)size4szPf);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szPf[(int)size4szPf - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szPf = TdrTypeUtil.cstrlen(this.szPf) + 1;
   if (size4szPf != realSize4szPf)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  /* unpack member: this.szPfKey */
  {
   /* get sizeinfo for this.szPfKey */
   UInt32 size4szPfKey = 0;
   ret = srcBuf.readUInt32(ref size4szPfKey);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szPfKey > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szPfKey > this.szPfKey.GetLength(0))
   {
    if ((int)size4szPfKey <= LENGTH_szPfKey)
    {
     this.szPfKey = new byte[size4szPfKey];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szPfKey)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szPfKey, (int)size4szPfKey);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szPfKey[(int)size4szPfKey - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szPfKey = TdrTypeUtil.cstrlen(this.szPfKey) + 1;
   if (size4szPfKey != realSize4szPfKey)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  /* unpack member: this.szPayToken */
  {
   /* get sizeinfo for this.szPayToken */
   UInt32 size4szPayToken = 0;
   ret = srcBuf.readUInt32(ref size4szPayToken);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szPayToken > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szPayToken > this.szPayToken.GetLength(0))
   {
    if ((int)size4szPayToken <= LENGTH_szPayToken)
    {
     this.szPayToken = new byte[size4szPayToken];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szPayToken)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szPayToken, (int)size4szPayToken);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szPayToken[(int)size4szPayToken - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szPayToken = TdrTypeUtil.cstrlen(this.szPayToken) + 1;
   if (size4szPayToken != realSize4szPayToken)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  /* unpack member: this.szLoginChannel */
  {
   /* get sizeinfo for this.szLoginChannel */
   UInt32 size4szLoginChannel = 0;
   ret = srcBuf.readUInt32(ref size4szLoginChannel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szLoginChannel > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szLoginChannel > this.szLoginChannel.GetLength(0))
   {
    if ((int)size4szLoginChannel <= LENGTH_szLoginChannel)
    {
     this.szLoginChannel = new byte[size4szLoginChannel];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szLoginChannel)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szLoginChannel, (int)size4szLoginChannel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szLoginChannel[(int)size4szLoginChannel - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szLoginChannel = TdrTypeUtil.cstrlen(this.szLoginChannel) + 1;
   if (size4szLoginChannel != realSize4szLoginChannel)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  /* unpack member: this.stDeviceInfo */
  {
   ret = this.stDeviceInfo.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSGetRole.CURRVERSION < cutVer)
  {
   cutVer = CSGetRole.CURRVERSION;
  }

  /* check cutversion */
  if (CSGetRole.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.wZoneId */
  {
   ret = srcBuf.readUInt16(ref this.wZoneId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.szPf */
  {
   Int32 size4szPf = 128;
   if (this.szPf.GetLength(0) < size4szPf)
   {
    this.szPf = new byte[LENGTH_szPf];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szPf, (int)size4szPf);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  /* load member: this.szPfKey */
  {
   Int32 size4szPfKey = 128;
   if (this.szPfKey.GetLength(0) < size4szPfKey)
   {
    this.szPfKey = new byte[LENGTH_szPfKey];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szPfKey, (int)size4szPfKey);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  /* load member: this.szPayToken */
  {
   Int32 size4szPayToken = 256;
   if (this.szPayToken.GetLength(0) < size4szPayToken)
   {
    this.szPayToken = new byte[LENGTH_szPayToken];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szPayToken, (int)size4szPayToken);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  /* load member: this.szLoginChannel */
  {
   Int32 size4szLoginChannel = 128;
   if (this.szLoginChannel.GetLength(0) < size4szLoginChannel)
   {
    this.szLoginChannel = new byte[LENGTH_szLoginChannel];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szLoginChannel, (int)size4szLoginChannel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  /* load member: this.stDeviceInfo */
  {
   ret = this.stDeviceInfo.load(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.wZoneId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[wZoneId]", "{0:d}", this.wZoneId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.szPf */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szPf]", this.szPf);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.szPfKey */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szPfKey]", this.szPfKey);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.szPayToken */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szPayToken]", this.szPayToken);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.szLoginChannel */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szLoginChannel]", this.szLoginChannel);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.stDeviceInfo */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stDeviceInfo]", true);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize children of this.stDeviceInfo */
  if (0 > indent)
  {
   ret = this.stDeviceInfo.visualize(ref destBuf, indent, separator);
  } else
  {
   ret = this.stDeviceInfo.visualize(ref destBuf, indent + 1, separator);
  }
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
 public static readonly uint LENGTH_szPf = 128;
 public static readonly uint LENGTH_szPfKey = 128;
 public static readonly uint LENGTH_szPayToken = 256;
 public static readonly uint LENGTH_szLoginChannel = 128;
}


public class SCRoleInfo : tsf4g_csharp_interface
{
 /* public members */
 public UInt64 ullRoleId; // 0:not create yet
 public byte[] szRoleName;
 public UInt16 wImageID;
 public UInt16 wLevel;
 public Int32 iCreateTime;
 public UInt16 wCreateZone;

 /* construct methods */
 public SCRoleInfo()
 {
  szRoleName = new byte[32];
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCRoleInfo.CURRVERSION < cutVer)
  {
   cutVer = SCRoleInfo.CURRVERSION;
  }

  /* check cutversion */
  if (SCRoleInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.ullRoleId */
  {
   ret = destBuf.writeUInt64(this.ullRoleId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.szRoleName */
  {
   /* record sizeinfo position */
   Int32 sizePos4szRoleName = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szRoleName = destBuf.getUsedSize();

   Int32 realSize4szRoleName = TdrTypeUtil.cstrlen(this.szRoleName);

   if (realSize4szRoleName >= 32)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szRoleName, realSize4szRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szRoleName */
   Int32 size4szRoleName = destBuf.getUsedSize() - beginPos4szRoleName;
   ret = destBuf.writeUInt32((UInt32)(size4szRoleName), sizePos4szRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.wImageID */
  {
   ret = destBuf.writeUInt16(this.wImageID);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.wLevel */
  {
   ret = destBuf.writeUInt16(this.wLevel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iCreateTime */
  {
   ret = destBuf.writeInt32(this.iCreateTime);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.wCreateZone */
  {
   ret = destBuf.writeUInt16(this.wCreateZone);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCRoleInfo.CURRVERSION < cutVer)
  {
   cutVer = SCRoleInfo.CURRVERSION;
  }

  /* check cutversion */
  if (SCRoleInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.ullRoleId */
  {
   ret = srcBuf.readUInt64(ref this.ullRoleId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.szRoleName */
  {
   /* get sizeinfo for this.szRoleName */
   UInt32 size4szRoleName = 0;
   ret = srcBuf.readUInt32(ref size4szRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szRoleName > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szRoleName > this.szRoleName.GetLength(0))
   {
    if ((int)size4szRoleName <= LENGTH_szRoleName)
    {
     this.szRoleName = new byte[size4szRoleName];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szRoleName)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szRoleName, (int)size4szRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szRoleName[(int)size4szRoleName - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szRoleName = TdrTypeUtil.cstrlen(this.szRoleName) + 1;
   if (size4szRoleName != realSize4szRoleName)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  /* unpack member: this.wImageID */
  {
   ret = srcBuf.readUInt16(ref this.wImageID);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.wLevel */
  {
   ret = srcBuf.readUInt16(ref this.wLevel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iCreateTime */
  {
   ret = srcBuf.readInt32(ref this.iCreateTime);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.wCreateZone */
  {
   ret = srcBuf.readUInt16(ref this.wCreateZone);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCRoleInfo.CURRVERSION < cutVer)
  {
   cutVer = SCRoleInfo.CURRVERSION;
  }

  /* check cutversion */
  if (SCRoleInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.ullRoleId */
  {
   ret = srcBuf.readUInt64(ref this.ullRoleId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.szRoleName */
  {
   Int32 size4szRoleName = 32;
   if (this.szRoleName.GetLength(0) < size4szRoleName)
   {
    this.szRoleName = new byte[LENGTH_szRoleName];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szRoleName, (int)size4szRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  /* load member: this.wImageID */
  {
   ret = srcBuf.readUInt16(ref this.wImageID);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.wLevel */
  {
   ret = srcBuf.readUInt16(ref this.wLevel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iCreateTime */
  {
   ret = srcBuf.readInt32(ref this.iCreateTime);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.wCreateZone */
  {
   ret = srcBuf.readUInt16(ref this.wCreateZone);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.ullRoleId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ullRoleId]", "{0:d}", this.ullRoleId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.szRoleName */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szRoleName]", this.szRoleName);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.wImageID */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[wImageID]", "{0:d}", this.wImageID);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.wLevel */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[wLevel]", "{0:d}", this.wLevel);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iCreateTime */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iCreateTime]", "{0:d}", this.iCreateTime);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.wCreateZone */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[wCreateZone]", "{0:d}", this.wCreateZone);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
 public static readonly uint LENGTH_szRoleName = 32;
}


public class CSCreateRole : tsf4g_csharp_interface
{
 /* public members */
 public byte[] szRoleName;
 public UInt16 wImageID;

 /* construct methods */
 public CSCreateRole()
 {
  szRoleName = new byte[32];
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSCreateRole.CURRVERSION < cutVer)
  {
   cutVer = CSCreateRole.CURRVERSION;
  }

  /* check cutversion */
  if (CSCreateRole.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.szRoleName */
  {
   /* record sizeinfo position */
   Int32 sizePos4szRoleName = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szRoleName = destBuf.getUsedSize();

   Int32 realSize4szRoleName = TdrTypeUtil.cstrlen(this.szRoleName);

   if (realSize4szRoleName >= 32)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szRoleName, realSize4szRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szRoleName */
   Int32 size4szRoleName = destBuf.getUsedSize() - beginPos4szRoleName;
   ret = destBuf.writeUInt32((UInt32)(size4szRoleName), sizePos4szRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.wImageID */
  {
   ret = destBuf.writeUInt16(this.wImageID);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSCreateRole.CURRVERSION < cutVer)
  {
   cutVer = CSCreateRole.CURRVERSION;
  }

  /* check cutversion */
  if (CSCreateRole.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.szRoleName */
  {
   /* get sizeinfo for this.szRoleName */
   UInt32 size4szRoleName = 0;
   ret = srcBuf.readUInt32(ref size4szRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szRoleName > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szRoleName > this.szRoleName.GetLength(0))
   {
    if ((int)size4szRoleName <= LENGTH_szRoleName)
    {
     this.szRoleName = new byte[size4szRoleName];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szRoleName)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szRoleName, (int)size4szRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szRoleName[(int)size4szRoleName - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szRoleName = TdrTypeUtil.cstrlen(this.szRoleName) + 1;
   if (size4szRoleName != realSize4szRoleName)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  /* unpack member: this.wImageID */
  {
   ret = srcBuf.readUInt16(ref this.wImageID);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSCreateRole.CURRVERSION < cutVer)
  {
   cutVer = CSCreateRole.CURRVERSION;
  }

  /* check cutversion */
  if (CSCreateRole.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.szRoleName */
  {
   Int32 size4szRoleName = 32;
   if (this.szRoleName.GetLength(0) < size4szRoleName)
   {
    this.szRoleName = new byte[LENGTH_szRoleName];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szRoleName, (int)size4szRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  /* load member: this.wImageID */
  {
   ret = srcBuf.readUInt16(ref this.wImageID);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.szRoleName */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szRoleName]", this.szRoleName);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.wImageID */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[wImageID]", "{0:d}", this.wImageID);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
 public static readonly uint LENGTH_szRoleName = 32;
}


/* 查询角色名 */
public class CSQueryName : tsf4g_csharp_interface
{
 /* public members */
 public byte[] szRoleName; // role Name

 /* construct methods */
 public CSQueryName()
 {
  szRoleName = new byte[32];
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSQueryName.CURRVERSION < cutVer)
  {
   cutVer = CSQueryName.CURRVERSION;
  }

  /* check cutversion */
  if (CSQueryName.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.szRoleName */
  {
   /* record sizeinfo position */
   Int32 sizePos4szRoleName = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szRoleName = destBuf.getUsedSize();

   Int32 realSize4szRoleName = TdrTypeUtil.cstrlen(this.szRoleName);

   if (realSize4szRoleName >= 32)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szRoleName, realSize4szRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szRoleName */
   Int32 size4szRoleName = destBuf.getUsedSize() - beginPos4szRoleName;
   ret = destBuf.writeUInt32((UInt32)(size4szRoleName), sizePos4szRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSQueryName.CURRVERSION < cutVer)
  {
   cutVer = CSQueryName.CURRVERSION;
  }

  /* check cutversion */
  if (CSQueryName.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.szRoleName */
  {
   /* get sizeinfo for this.szRoleName */
   UInt32 size4szRoleName = 0;
   ret = srcBuf.readUInt32(ref size4szRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szRoleName > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szRoleName > this.szRoleName.GetLength(0))
   {
    if ((int)size4szRoleName <= LENGTH_szRoleName)
    {
     this.szRoleName = new byte[size4szRoleName];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szRoleName)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szRoleName, (int)size4szRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szRoleName[(int)size4szRoleName - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szRoleName = TdrTypeUtil.cstrlen(this.szRoleName) + 1;
   if (size4szRoleName != realSize4szRoleName)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSQueryName.CURRVERSION < cutVer)
  {
   cutVer = CSQueryName.CURRVERSION;
  }

  /* check cutversion */
  if (CSQueryName.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.szRoleName */
  {
   Int32 size4szRoleName = 32;
   if (this.szRoleName.GetLength(0) < size4szRoleName)
   {
    this.szRoleName = new byte[LENGTH_szRoleName];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szRoleName, (int)size4szRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.szRoleName */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szRoleName]", this.szRoleName);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
 public static readonly uint LENGTH_szRoleName = 32;
}


/* 查询金钱信息响应 */
public class SCMoneyInfo : tsf4g_csharp_interface
{
 /* public members */
 public UInt32[] money; // keyword,MONEY_TYPE
 public sbyte chVipLevel; // vip等级
 public Int32 iVipScore; // vip赠送积分

 /* construct methods */
 public SCMoneyInfo()
 {
  money = new UInt32[4];
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCMoneyInfo.CURRVERSION < cutVer)
  {
   cutVer = SCMoneyInfo.CURRVERSION;
  }

  /* check cutversion */
  if (SCMoneyInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.money */
  {
   for (Int32 money_i = 0; money_i < 4; money_i++)
   {
    ret = destBuf.writeUInt32(this.money[money_i]);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  /* pack member: this.chVipLevel */
  {
   ret = destBuf.writeInt8(this.chVipLevel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iVipScore */
  {
   ret = destBuf.writeInt32(this.iVipScore);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCMoneyInfo.CURRVERSION < cutVer)
  {
   cutVer = SCMoneyInfo.CURRVERSION;
  }

  /* check cutversion */
  if (SCMoneyInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.money */
  {
   for (Int32 money_i = 0; money_i < 4; money_i++)
   {
    ret = srcBuf.readUInt32(ref this.money[money_i]);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  /* unpack member: this.chVipLevel */
  {
   ret = srcBuf.readInt8(ref this.chVipLevel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iVipScore */
  {
   ret = srcBuf.readInt32(ref this.iVipScore);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCMoneyInfo.CURRVERSION < cutVer)
  {
   cutVer = SCMoneyInfo.CURRVERSION;
  }

  /* check cutversion */
  if (SCMoneyInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.money */
  {
   for (Int32 money_i = 0; money_i < 4; money_i++)
   {
    ret = srcBuf.readUInt32(ref this.money[money_i]);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  /* load member: this.chVipLevel */
  {
   ret = srcBuf.readInt8(ref this.chVipLevel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iVipScore */
  {
   ret = srcBuf.readInt32(ref this.iVipScore);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.money */
  ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[money]", 4);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }
  for (Int32 money_i = 0; money_i < 4; money_i++)
  {
   ret = destBuf.sprintf("{0:d}", this.money[money_i]);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  ret = destBuf.sprintf("{0}",separator);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.chVipLevel */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[chVipLevel]", "0x{0:x2}", this.chVipLevel);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iVipScore */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iVipScore]", "{0:d}", this.iVipScore);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 资源 */
public class Resource : tsf4g_csharp_interface
{
 /* public members */
 public UInt32 dwCount; // 数量
 public UInt32 dwRecoverTime; // 上一次恢复时间，不自动恢复的可以为0

 /* construct methods */
 public Resource()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || Resource.CURRVERSION < cutVer)
  {
   cutVer = Resource.CURRVERSION;
  }

  /* check cutversion */
  if (Resource.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.dwCount */
  {
   ret = destBuf.writeUInt32(this.dwCount);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.dwRecoverTime */
  {
   ret = destBuf.writeUInt32(this.dwRecoverTime);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || Resource.CURRVERSION < cutVer)
  {
   cutVer = Resource.CURRVERSION;
  }

  /* check cutversion */
  if (Resource.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.dwCount */
  {
   ret = srcBuf.readUInt32(ref this.dwCount);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.dwRecoverTime */
  {
   ret = srcBuf.readUInt32(ref this.dwRecoverTime);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || Resource.CURRVERSION < cutVer)
  {
   cutVer = Resource.CURRVERSION;
  }

  /* check cutversion */
  if (Resource.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.dwCount */
  {
   ret = srcBuf.readUInt32(ref this.dwCount);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.dwRecoverTime */
  {
   ret = srcBuf.readUInt32(ref this.dwRecoverTime);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.dwCount */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[dwCount]", "{0:d}", this.dwCount);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.dwRecoverTime */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[dwRecoverTime]", "{0:d}", this.dwRecoverTime);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 资源信息 */
public class SCResource : tsf4g_csharp_interface
{
 /* public members */
 public Resource[] astResources; // 资源，类型见keyword，RESOURCE_TYPE

 /* construct methods */
 public SCResource()
 {
  astResources = new Resource[20];
  for (int astResources_i = 0; astResources_i < 20; astResources_i++)
  {
   astResources[astResources_i] = new Resource();
  }

 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCResource.CURRVERSION < cutVer)
  {
   cutVer = SCResource.CURRVERSION;
  }

  /* check cutversion */
  if (SCResource.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.astResources */
  {
   for (Int32 astResources_i = 0; astResources_i < 20; astResources_i++)
   {
    ret = this.astResources[astResources_i].pack(ref destBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCResource.CURRVERSION < cutVer)
  {
   cutVer = SCResource.CURRVERSION;
  }

  /* check cutversion */
  if (SCResource.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.astResources */
  {
   for (Int32 astResources_i = 0; astResources_i < 20; astResources_i++)
   {
    ret = this.astResources[astResources_i].unpack(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCResource.CURRVERSION < cutVer)
  {
   cutVer = SCResource.CURRVERSION;
  }

  /* check cutversion */
  if (SCResource.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.astResources */
  {
   for (Int32 astResources_i = 0; astResources_i < 20; astResources_i++)
   {
    ret = this.astResources[astResources_i].load(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.astResources */
  for (Int32 astResources_i = 0; astResources_i < 20; astResources_i++)
  {
   if (null == this.astResources[astResources_i])
   {
    continue;
   }

   ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[astResources]", astResources_i, true);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* visualize children of this.astResources[astResources_i] */
   if (0 > indent)
   {
    ret = this.astResources[astResources_i].visualize(ref destBuf, indent, separator);
   } else
   {
    ret = this.astResources[astResources_i].visualize(ref destBuf, indent + 1, separator);
   }
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 包裹信息 */
public class SCBagInfo : tsf4g_csharp_interface
{
 /* public members */
 public byte bUpdateType;
 public UInt16 wItemNum;
 public CSItemObj[] astItems; // 单元格信息

 /* construct methods */
 public SCBagInfo()
 {
  astItems = new CSItemObj[1000];
  for (int astItems_i = 0; astItems_i < 1000; astItems_i++)
  {
   astItems[astItems_i] = new CSItemObj();
  }

 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCBagInfo.CURRVERSION < cutVer)
  {
   cutVer = SCBagInfo.CURRVERSION;
  }

  /* check cutversion */
  if (SCBagInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.bUpdateType */
  {
   ret = destBuf.writeUInt8(this.bUpdateType);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.wItemNum */
  {
   ret = destBuf.writeUInt16(this.wItemNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.astItems */
  {
   if (1000 < this.wItemNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
   }

   if (this.astItems.Length < this.wItemNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
   }

   for (Int32 astItems_i = 0; astItems_i < this.wItemNum; astItems_i++)
   {
    ret = this.astItems[astItems_i].pack(ref destBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCBagInfo.CURRVERSION < cutVer)
  {
   cutVer = SCBagInfo.CURRVERSION;
  }

  /* check cutversion */
  if (SCBagInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.bUpdateType */
  {
   ret = srcBuf.readUInt8(ref this.bUpdateType);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.wItemNum */
  {
   ret = srcBuf.readUInt16(ref this.wItemNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.astItems */
  {
   if (1000 < this.wItemNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
   }

   {
    this.astItems = new CSItemObj[this.wItemNum];
    for (Int32 astItems_i = 0; astItems_i < this.wItemNum; astItems_i++)
    {
     this.astItems[astItems_i] = new CSItemObj();
    }
   }

   for (Int32 astItems_i = 0; astItems_i < this.wItemNum; astItems_i++)
   {
    ret = this.astItems[astItems_i].unpack(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCBagInfo.CURRVERSION < cutVer)
  {
   cutVer = SCBagInfo.CURRVERSION;
  }

  /* check cutversion */
  if (SCBagInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.bUpdateType */
  {
   ret = srcBuf.readUInt8(ref this.bUpdateType);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.wItemNum */
  {
   ret = srcBuf.readUInt16(ref this.wItemNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.astItems */
  {
   if (this.astItems.Length < 1000)
   {
    this.astItems = new CSItemObj[1000];
    for (Int32 astItems_i = 0; astItems_i < 1000; astItems_i++)
    {
     this.astItems[astItems_i] = new CSItemObj();
    }
   }

   for (Int32 astItems_i = 0; astItems_i < 1000; astItems_i++)
   {
    ret = this.astItems[astItems_i].load(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.bUpdateType */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bUpdateType]", "0x{0:x2}", this.bUpdateType);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.wItemNum */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[wItemNum]", "{0:d}", this.wItemNum);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.astItems */
  if (1000 < this.wItemNum)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
  }
  for (Int32 astItems_i = 0; astItems_i < this.wItemNum; astItems_i++)
  {
   if (null == this.astItems[astItems_i])
   {
    continue;
   }

   ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[astItems]", astItems_i, true);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* visualize children of this.astItems[astItems_i] */
   if (0 > indent)
   {
    ret = this.astItems[astItems_i].visualize(ref destBuf, indent, separator);
   } else
   {
    ret = this.astItems[astItems_i].visualize(ref destBuf, indent + 1, separator);
   }
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 使用道具 */
public class CSUseItem : tsf4g_csharp_interface
{
 /* public members */
 public CSItemObj stItem; // 道具
 public UInt64 ullPara1; // 道具参数1，不同道具所需参数不一样，待定
 public UInt64 ullPara2; // 道具参数2，不同道具所需参数不一样，待定

 /* construct methods */
 public CSUseItem()
 {
  stItem = new CSItemObj();
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSUseItem.CURRVERSION < cutVer)
  {
   cutVer = CSUseItem.CURRVERSION;
  }

  /* check cutversion */
  if (CSUseItem.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.stItem */
  {
   ret = this.stItem.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.ullPara1 */
  {
   ret = destBuf.writeUInt64(this.ullPara1);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.ullPara2 */
  {
   ret = destBuf.writeUInt64(this.ullPara2);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSUseItem.CURRVERSION < cutVer)
  {
   cutVer = CSUseItem.CURRVERSION;
  }

  /* check cutversion */
  if (CSUseItem.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.stItem */
  {
   ret = this.stItem.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.ullPara1 */
  {
   ret = srcBuf.readUInt64(ref this.ullPara1);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.ullPara2 */
  {
   ret = srcBuf.readUInt64(ref this.ullPara2);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSUseItem.CURRVERSION < cutVer)
  {
   cutVer = CSUseItem.CURRVERSION;
  }

  /* check cutversion */
  if (CSUseItem.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.stItem */
  {
   ret = this.stItem.load(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.ullPara1 */
  {
   ret = srcBuf.readUInt64(ref this.ullPara1);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.ullPara2 */
  {
   ret = srcBuf.readUInt64(ref this.ullPara2);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.stItem */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stItem]", true);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize children of this.stItem */
  if (0 > indent)
  {
   ret = this.stItem.visualize(ref destBuf, indent, separator);
  } else
  {
   ret = this.stItem.visualize(ref destBuf, indent + 1, separator);
  }
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.ullPara1 */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ullPara1]", "{0:d}", this.ullPara1);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.ullPara2 */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ullPara2]", "{0:d}", this.ullPara2);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 合成道具 */
public class CSComposeItem : tsf4g_csharp_interface
{
 /* public members */
 public CSItemObj stItem; // 目标道具

 /* construct methods */
 public CSComposeItem()
 {
  stItem = new CSItemObj();
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSComposeItem.CURRVERSION < cutVer)
  {
   cutVer = CSComposeItem.CURRVERSION;
  }

  /* check cutversion */
  if (CSComposeItem.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.stItem */
  {
   ret = this.stItem.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSComposeItem.CURRVERSION < cutVer)
  {
   cutVer = CSComposeItem.CURRVERSION;
  }

  /* check cutversion */
  if (CSComposeItem.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.stItem */
  {
   ret = this.stItem.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSComposeItem.CURRVERSION < cutVer)
  {
   cutVer = CSComposeItem.CURRVERSION;
  }

  /* check cutversion */
  if (CSComposeItem.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.stItem */
  {
   ret = this.stItem.load(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.stItem */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stItem]", true);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize children of this.stItem */
  if (0 > indent)
  {
   ret = this.stItem.visualize(ref destBuf, indent, separator);
  } else
  {
   ret = this.stItem.visualize(ref destBuf, indent + 1, separator);
  }
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 出售道具 */
public class CSSellItem : tsf4g_csharp_interface
{
 /* public members */
 public byte bItemNum;
 public CSItemObj[] astItems; // 0

 /* construct methods */
 public CSSellItem()
 {
  astItems = new CSItemObj[10];
  for (int astItems_i = 0; astItems_i < 10; astItems_i++)
  {
   astItems[astItems_i] = new CSItemObj();
  }

 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSSellItem.CURRVERSION < cutVer)
  {
   cutVer = CSSellItem.CURRVERSION;
  }

  /* check cutversion */
  if (CSSellItem.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.bItemNum */
  {
   ret = destBuf.writeUInt8(this.bItemNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.astItems */
  {
   if (10 < this.bItemNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
   }

   if (this.astItems.Length < this.bItemNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
   }

   for (Int32 astItems_i = 0; astItems_i < this.bItemNum; astItems_i++)
   {
    ret = this.astItems[astItems_i].pack(ref destBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSSellItem.CURRVERSION < cutVer)
  {
   cutVer = CSSellItem.CURRVERSION;
  }

  /* check cutversion */
  if (CSSellItem.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.bItemNum */
  {
   ret = srcBuf.readUInt8(ref this.bItemNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.astItems */
  {
   if (10 < this.bItemNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
   }

   {
    this.astItems = new CSItemObj[this.bItemNum];
    for (Int32 astItems_i = 0; astItems_i < this.bItemNum; astItems_i++)
    {
     this.astItems[astItems_i] = new CSItemObj();
    }
   }

   for (Int32 astItems_i = 0; astItems_i < this.bItemNum; astItems_i++)
   {
    ret = this.astItems[astItems_i].unpack(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSSellItem.CURRVERSION < cutVer)
  {
   cutVer = CSSellItem.CURRVERSION;
  }

  /* check cutversion */
  if (CSSellItem.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.bItemNum */
  {
   ret = srcBuf.readUInt8(ref this.bItemNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.astItems */
  {
   if (this.astItems.Length < 10)
   {
    this.astItems = new CSItemObj[10];
    for (Int32 astItems_i = 0; astItems_i < 10; astItems_i++)
    {
     this.astItems[astItems_i] = new CSItemObj();
    }
   }

   for (Int32 astItems_i = 0; astItems_i < 10; astItems_i++)
   {
    ret = this.astItems[astItems_i].load(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.bItemNum */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bItemNum]", "0x{0:x2}", this.bItemNum);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.astItems */
  if (10 < this.bItemNum)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
  }
  for (Int32 astItems_i = 0; astItems_i < this.bItemNum; astItems_i++)
  {
   if (null == this.astItems[astItems_i])
   {
    continue;
   }

   ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[astItems]", astItems_i, true);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* visualize children of this.astItems[astItems_i] */
   if (0 > indent)
   {
    ret = this.astItems[astItems_i].visualize(ref destBuf, indent, separator);
   } else
   {
    ret = this.astItems[astItems_i].visualize(ref destBuf, indent + 1, separator);
   }
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 通用获得奖励 */
public class GotThings : tsf4g_csharp_interface
{
 /* public members */
 public UInt32[] money; // keyword,MONEY_TYPE
 public UInt32[] resources; // 资源，类型见keyword，RESOURCE_TYPE
 public Int32 iRoleExp; // 经验
 public Int32 iItemNum; // 获得道具的数量
 public CSItemObj[] astItems; // 道具
 public Int32 iInstanceNum; // 获得的实例物品数量
 public KV[] astInstances; // 获得的实例物品数组

 /* construct methods */
 public GotThings()
 {
  money = new UInt32[4];
  resources = new UInt32[20];
  astItems = new CSItemObj[10];
  for (int astItems_i = 0; astItems_i < 10; astItems_i++)
  {
   astItems[astItems_i] = new CSItemObj();
  }

  astInstances = new KV[10];
  for (int astInstances_i = 0; astInstances_i < 10; astInstances_i++)
  {
   astInstances[astInstances_i] = new KV();
  }

 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || GotThings.CURRVERSION < cutVer)
  {
   cutVer = GotThings.CURRVERSION;
  }

  /* check cutversion */
  if (GotThings.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.money */
  {
   for (Int32 money_i = 0; money_i < 4; money_i++)
   {
    ret = destBuf.writeUInt32(this.money[money_i]);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  /* pack member: this.resources */
  {
   for (Int32 resources_i = 0; resources_i < 20; resources_i++)
   {
    ret = destBuf.writeUInt32(this.resources[resources_i]);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  /* pack member: this.iRoleExp */
  {
   ret = destBuf.writeInt32(this.iRoleExp);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iItemNum */
  {
   ret = destBuf.writeInt32(this.iItemNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.astItems */
  {
   if (0 > this.iItemNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
   }
   if (10 < this.iItemNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
   }

   if (this.astItems.Length < this.iItemNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
   }

   for (Int32 astItems_i = 0; astItems_i < this.iItemNum; astItems_i++)
   {
    ret = this.astItems[astItems_i].pack(ref destBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  /* pack member: this.iInstanceNum */
  {
   ret = destBuf.writeInt32(this.iInstanceNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.astInstances */
  {
   if (0 > this.iInstanceNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
   }
   if (10 < this.iInstanceNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
   }

   if (this.astInstances.Length < this.iInstanceNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
   }

   for (Int32 astInstances_i = 0; astInstances_i < this.iInstanceNum; astInstances_i++)
   {
    ret = this.astInstances[astInstances_i].pack(ref destBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || GotThings.CURRVERSION < cutVer)
  {
   cutVer = GotThings.CURRVERSION;
  }

  /* check cutversion */
  if (GotThings.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.money */
  {
   for (Int32 money_i = 0; money_i < 4; money_i++)
   {
    ret = srcBuf.readUInt32(ref this.money[money_i]);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  /* unpack member: this.resources */
  {
   for (Int32 resources_i = 0; resources_i < 20; resources_i++)
   {
    ret = srcBuf.readUInt32(ref this.resources[resources_i]);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  /* unpack member: this.iRoleExp */
  {
   ret = srcBuf.readInt32(ref this.iRoleExp);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iItemNum */
  {
   ret = srcBuf.readInt32(ref this.iItemNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.astItems */
  {
   if (0 > this.iItemNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
   }
   if (10 < this.iItemNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
   }

   {
    this.astItems = new CSItemObj[this.iItemNum];
    for (Int32 astItems_i = 0; astItems_i < this.iItemNum; astItems_i++)
    {
     this.astItems[astItems_i] = new CSItemObj();
    }
   }

   for (Int32 astItems_i = 0; astItems_i < this.iItemNum; astItems_i++)
   {
    ret = this.astItems[astItems_i].unpack(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  /* unpack member: this.iInstanceNum */
  {
   ret = srcBuf.readInt32(ref this.iInstanceNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.astInstances */
  {
   if (0 > this.iInstanceNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
   }
   if (10 < this.iInstanceNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
   }

   {
    this.astInstances = new KV[this.iInstanceNum];
    for (Int32 astInstances_i = 0; astInstances_i < this.iInstanceNum; astInstances_i++)
    {
     this.astInstances[astInstances_i] = new KV();
    }
   }

   for (Int32 astInstances_i = 0; astInstances_i < this.iInstanceNum; astInstances_i++)
   {
    ret = this.astInstances[astInstances_i].unpack(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || GotThings.CURRVERSION < cutVer)
  {
   cutVer = GotThings.CURRVERSION;
  }

  /* check cutversion */
  if (GotThings.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.money */
  {
   for (Int32 money_i = 0; money_i < 4; money_i++)
   {
    ret = srcBuf.readUInt32(ref this.money[money_i]);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  /* load member: this.resources */
  {
   for (Int32 resources_i = 0; resources_i < 20; resources_i++)
   {
    ret = srcBuf.readUInt32(ref this.resources[resources_i]);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  /* load member: this.iRoleExp */
  {
   ret = srcBuf.readInt32(ref this.iRoleExp);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iItemNum */
  {
   ret = srcBuf.readInt32(ref this.iItemNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.astItems */
  {
   if (this.astItems.Length < 10)
   {
    this.astItems = new CSItemObj[10];
    for (Int32 astItems_i = 0; astItems_i < 10; astItems_i++)
    {
     this.astItems[astItems_i] = new CSItemObj();
    }
   }

   for (Int32 astItems_i = 0; astItems_i < 10; astItems_i++)
   {
    ret = this.astItems[astItems_i].load(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  /* load member: this.iInstanceNum */
  {
   ret = srcBuf.readInt32(ref this.iInstanceNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.astInstances */
  {
   if (this.astInstances.Length < 10)
   {
    this.astInstances = new KV[10];
    for (Int32 astInstances_i = 0; astInstances_i < 10; astInstances_i++)
    {
     this.astInstances[astInstances_i] = new KV();
    }
   }

   for (Int32 astInstances_i = 0; astInstances_i < 10; astInstances_i++)
   {
    ret = this.astInstances[astInstances_i].load(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.money */
  ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[money]", 4);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }
  for (Int32 money_i = 0; money_i < 4; money_i++)
  {
   ret = destBuf.sprintf("{0:d}", this.money[money_i]);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  ret = destBuf.sprintf("{0}",separator);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.resources */
  ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[resources]", 20);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }
  for (Int32 resources_i = 0; resources_i < 20; resources_i++)
  {
   ret = destBuf.sprintf("{0:d}", this.resources[resources_i]);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  ret = destBuf.sprintf("{0}",separator);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iRoleExp */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iRoleExp]", "{0:d}", this.iRoleExp);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iItemNum */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iItemNum]", "{0:d}", this.iItemNum);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.astItems */
  if (0 > this.iItemNum)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
  }
  if (10 < this.iItemNum)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
  }
  for (Int32 astItems_i = 0; astItems_i < this.iItemNum; astItems_i++)
  {
   if (null == this.astItems[astItems_i])
   {
    continue;
   }

   ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[astItems]", astItems_i, true);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* visualize children of this.astItems[astItems_i] */
   if (0 > indent)
   {
    ret = this.astItems[astItems_i].visualize(ref destBuf, indent, separator);
   } else
   {
    ret = this.astItems[astItems_i].visualize(ref destBuf, indent + 1, separator);
   }
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* visualize member: this.iInstanceNum */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iInstanceNum]", "{0:d}", this.iInstanceNum);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.astInstances */
  if (0 > this.iInstanceNum)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
  }
  if (10 < this.iInstanceNum)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
  }
  for (Int32 astInstances_i = 0; astInstances_i < this.iInstanceNum; astInstances_i++)
  {
   if (null == this.astInstances[astInstances_i])
   {
    continue;
   }

   ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[astInstances]", astInstances_i, true);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* visualize children of this.astInstances[astInstances_i] */
   if (0 > indent)
   {
    ret = this.astInstances[astInstances_i].visualize(ref destBuf, indent, separator);
   } else
   {
    ret = this.astInstances[astInstances_i].visualize(ref destBuf, indent + 1, separator);
   }
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 奖励通知，通用协议 */
public class SCRewardNotify : tsf4g_csharp_interface
{
 /* public members */
 public UInt32 dwSource; // 获得奖励原因或物品id，1000以下为道具，其他原因见REWARD_SOURCE
 public UInt32 dwCount; // 奖励内容数组长度
 public GotThings[] astGotThings; // 奖励内容

 /* construct methods */
 public SCRewardNotify()
 {
  astGotThings = new GotThings[10];
  for (int astGotThings_i = 0; astGotThings_i < 10; astGotThings_i++)
  {
   astGotThings[astGotThings_i] = new GotThings();
  }

 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCRewardNotify.CURRVERSION < cutVer)
  {
   cutVer = SCRewardNotify.CURRVERSION;
  }

  /* check cutversion */
  if (SCRewardNotify.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.dwSource */
  {
   ret = destBuf.writeUInt32(this.dwSource);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.dwCount */
  {
   ret = destBuf.writeUInt32(this.dwCount);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.astGotThings */
  {
   if (10 < this.dwCount)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
   }

   if (this.astGotThings.Length < this.dwCount)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
   }

   for (Int32 astGotThings_i = 0; astGotThings_i < this.dwCount; astGotThings_i++)
   {
    ret = this.astGotThings[astGotThings_i].pack(ref destBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCRewardNotify.CURRVERSION < cutVer)
  {
   cutVer = SCRewardNotify.CURRVERSION;
  }

  /* check cutversion */
  if (SCRewardNotify.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.dwSource */
  {
   ret = srcBuf.readUInt32(ref this.dwSource);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.dwCount */
  {
   ret = srcBuf.readUInt32(ref this.dwCount);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.astGotThings */
  {
   if (10 < this.dwCount)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
   }

   {
    this.astGotThings = new GotThings[this.dwCount];
    for (Int32 astGotThings_i = 0; astGotThings_i < this.dwCount; astGotThings_i++)
    {
     this.astGotThings[astGotThings_i] = new GotThings();
    }
   }

   for (Int32 astGotThings_i = 0; astGotThings_i < this.dwCount; astGotThings_i++)
   {
    ret = this.astGotThings[astGotThings_i].unpack(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCRewardNotify.CURRVERSION < cutVer)
  {
   cutVer = SCRewardNotify.CURRVERSION;
  }

  /* check cutversion */
  if (SCRewardNotify.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.dwSource */
  {
   ret = srcBuf.readUInt32(ref this.dwSource);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.dwCount */
  {
   ret = srcBuf.readUInt32(ref this.dwCount);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.astGotThings */
  {
   if (this.astGotThings.Length < 10)
   {
    this.astGotThings = new GotThings[10];
    for (Int32 astGotThings_i = 0; astGotThings_i < 10; astGotThings_i++)
    {
     this.astGotThings[astGotThings_i] = new GotThings();
    }
   }

   for (Int32 astGotThings_i = 0; astGotThings_i < 10; astGotThings_i++)
   {
    ret = this.astGotThings[astGotThings_i].load(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.dwSource */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[dwSource]", "{0:d}", this.dwSource);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.dwCount */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[dwCount]", "{0:d}", this.dwCount);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.astGotThings */
  if (10 < this.dwCount)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
  }
  for (Int32 astGotThings_i = 0; astGotThings_i < this.dwCount; astGotThings_i++)
  {
   if (null == this.astGotThings[astGotThings_i])
   {
    continue;
   }

   ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[astGotThings]", astGotThings_i, true);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* visualize children of this.astGotThings[astGotThings_i] */
   if (0 > indent)
   {
    ret = this.astGotThings[astGotThings_i].visualize(ref destBuf, indent, separator);
   } else
   {
    ret = this.astGotThings[astGotThings_i].visualize(ref destBuf, indent + 1, separator);
   }
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 聊天信息 */
public class ChatInfo : tsf4g_csharp_interface
{
 /* public members */
 public UInt16 wChannelId; // 频道
 public UInt64 ullSrcRoleId; // 发送方英雄ID
 public byte[] szSrcImageUrl; // 平台头像
 public byte[] szSrcRoleName; // 发送方角色名。注：下行使用，上行不填
 public Int32 iSrcRoleFlag; // 发送方身份、状态标记位，编码待定
 public byte[] szDstRoleName; // 接收方角色名，注：私聊必填，其他不填
 public UInt16 wTemplateId; // 聊天模板ID，只在系统下行填写。0不使用模板
 public byte[] szContent; // 聊天内容

 /* construct methods */
 public ChatInfo()
 {
  szSrcImageUrl = new byte[128];
  szSrcRoleName = new byte[32];
  szDstRoleName = new byte[32];
  szContent = new byte[128];
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || ChatInfo.CURRVERSION < cutVer)
  {
   cutVer = ChatInfo.CURRVERSION;
  }

  /* check cutversion */
  if (ChatInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.wChannelId */
  {
   ret = destBuf.writeUInt16(this.wChannelId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.ullSrcRoleId */
  {
   ret = destBuf.writeUInt64(this.ullSrcRoleId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.szSrcImageUrl */
  {
   /* record sizeinfo position */
   Int32 sizePos4szSrcImageUrl = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szSrcImageUrl = destBuf.getUsedSize();

   Int32 realSize4szSrcImageUrl = TdrTypeUtil.cstrlen(this.szSrcImageUrl);

   if (realSize4szSrcImageUrl >= 128)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szSrcImageUrl, realSize4szSrcImageUrl);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szSrcImageUrl */
   Int32 size4szSrcImageUrl = destBuf.getUsedSize() - beginPos4szSrcImageUrl;
   ret = destBuf.writeUInt32((UInt32)(size4szSrcImageUrl), sizePos4szSrcImageUrl);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.szSrcRoleName */
  {
   /* record sizeinfo position */
   Int32 sizePos4szSrcRoleName = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szSrcRoleName = destBuf.getUsedSize();

   Int32 realSize4szSrcRoleName = TdrTypeUtil.cstrlen(this.szSrcRoleName);

   if (realSize4szSrcRoleName >= 32)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szSrcRoleName, realSize4szSrcRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szSrcRoleName */
   Int32 size4szSrcRoleName = destBuf.getUsedSize() - beginPos4szSrcRoleName;
   ret = destBuf.writeUInt32((UInt32)(size4szSrcRoleName), sizePos4szSrcRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iSrcRoleFlag */
  {
   ret = destBuf.writeInt32(this.iSrcRoleFlag);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.szDstRoleName */
  {
   /* record sizeinfo position */
   Int32 sizePos4szDstRoleName = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szDstRoleName = destBuf.getUsedSize();

   Int32 realSize4szDstRoleName = TdrTypeUtil.cstrlen(this.szDstRoleName);

   if (realSize4szDstRoleName >= 32)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szDstRoleName, realSize4szDstRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szDstRoleName */
   Int32 size4szDstRoleName = destBuf.getUsedSize() - beginPos4szDstRoleName;
   ret = destBuf.writeUInt32((UInt32)(size4szDstRoleName), sizePos4szDstRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.wTemplateId */
  {
   ret = destBuf.writeUInt16(this.wTemplateId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.szContent */
  {
   /* record sizeinfo position */
   Int32 sizePos4szContent = destBuf.getUsedSize();

   /* reserve space for sizeinfo */
   ret = destBuf.reserve(sizeof(UInt32));
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* record real-data's begin postion in buf */
   Int32 beginPos4szContent = destBuf.getUsedSize();

   Int32 realSize4szContent = TdrTypeUtil.cstrlen(this.szContent);

   if (realSize4szContent >= 128)
   {
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
   }

   /* pack */
   ret = destBuf.writeCString(this.szContent, realSize4szContent);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* gurantee string or wstring terminated with null character */
   ret = destBuf.writeUInt8(0x00);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* set sizeinfo for this.szContent */
   Int32 size4szContent = destBuf.getUsedSize() - beginPos4szContent;
   ret = destBuf.writeUInt32((UInt32)(size4szContent), sizePos4szContent);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || ChatInfo.CURRVERSION < cutVer)
  {
   cutVer = ChatInfo.CURRVERSION;
  }

  /* check cutversion */
  if (ChatInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.wChannelId */
  {
   ret = srcBuf.readUInt16(ref this.wChannelId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.ullSrcRoleId */
  {
   ret = srcBuf.readUInt64(ref this.ullSrcRoleId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.szSrcImageUrl */
  {
   /* get sizeinfo for this.szSrcImageUrl */
   UInt32 size4szSrcImageUrl = 0;
   ret = srcBuf.readUInt32(ref size4szSrcImageUrl);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szSrcImageUrl > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szSrcImageUrl > this.szSrcImageUrl.GetLength(0))
   {
    if ((int)size4szSrcImageUrl <= LENGTH_szSrcImageUrl)
    {
     this.szSrcImageUrl = new byte[size4szSrcImageUrl];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szSrcImageUrl)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szSrcImageUrl, (int)size4szSrcImageUrl);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szSrcImageUrl[(int)size4szSrcImageUrl - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szSrcImageUrl = TdrTypeUtil.cstrlen(this.szSrcImageUrl) + 1;
   if (size4szSrcImageUrl != realSize4szSrcImageUrl)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  /* unpack member: this.szSrcRoleName */
  {
   /* get sizeinfo for this.szSrcRoleName */
   UInt32 size4szSrcRoleName = 0;
   ret = srcBuf.readUInt32(ref size4szSrcRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szSrcRoleName > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szSrcRoleName > this.szSrcRoleName.GetLength(0))
   {
    if ((int)size4szSrcRoleName <= LENGTH_szSrcRoleName)
    {
     this.szSrcRoleName = new byte[size4szSrcRoleName];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szSrcRoleName)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szSrcRoleName, (int)size4szSrcRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szSrcRoleName[(int)size4szSrcRoleName - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szSrcRoleName = TdrTypeUtil.cstrlen(this.szSrcRoleName) + 1;
   if (size4szSrcRoleName != realSize4szSrcRoleName)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  /* unpack member: this.iSrcRoleFlag */
  {
   ret = srcBuf.readInt32(ref this.iSrcRoleFlag);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.szDstRoleName */
  {
   /* get sizeinfo for this.szDstRoleName */
   UInt32 size4szDstRoleName = 0;
   ret = srcBuf.readUInt32(ref size4szDstRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szDstRoleName > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szDstRoleName > this.szDstRoleName.GetLength(0))
   {
    if ((int)size4szDstRoleName <= LENGTH_szDstRoleName)
    {
     this.szDstRoleName = new byte[size4szDstRoleName];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szDstRoleName)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szDstRoleName, (int)size4szDstRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szDstRoleName[(int)size4szDstRoleName - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szDstRoleName = TdrTypeUtil.cstrlen(this.szDstRoleName) + 1;
   if (size4szDstRoleName != realSize4szDstRoleName)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  /* unpack member: this.wTemplateId */
  {
   ret = srcBuf.readUInt16(ref this.wTemplateId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.szContent */
  {
   /* get sizeinfo for this.szContent */
   UInt32 size4szContent = 0;
   ret = srcBuf.readUInt32(ref size4szContent);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether data in buffer are enough */
   if ((int)size4szContent > srcBuf.getLeftSize())
   {
    return TdrError.ErrorType.TDR_ERR_SHORT_BUF_FOR_READ;
   }

   /* check whether sizeinfo is valid */
   if ((int)size4szContent > this.szContent.GetLength(0))
   {
    if ((int)size4szContent <= LENGTH_szContent)
    {
     this.szContent = new byte[size4szContent];
    }
    else
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_BIG;
    }
   }

   /* string or wstring must contains a null character */
   if (1 > size4szContent)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_TOO_SMALL;
   }

   /* unpack */
   ret = srcBuf.readCString(ref this.szContent, (int)size4szContent);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* check whether string-content is consistent with sizeinfo */
   if (0 != this.szContent[(int)size4szContent - 1])
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
   Int32 realSize4szContent = TdrTypeUtil.cstrlen(this.szContent) + 1;
   if (size4szContent != realSize4szContent)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_STR_LEN_CONFLICT;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || ChatInfo.CURRVERSION < cutVer)
  {
   cutVer = ChatInfo.CURRVERSION;
  }

  /* check cutversion */
  if (ChatInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.wChannelId */
  {
   ret = srcBuf.readUInt16(ref this.wChannelId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.ullSrcRoleId */
  {
   ret = srcBuf.readUInt64(ref this.ullSrcRoleId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.szSrcImageUrl */
  {
   Int32 size4szSrcImageUrl = 128;
   if (this.szSrcImageUrl.GetLength(0) < size4szSrcImageUrl)
   {
    this.szSrcImageUrl = new byte[LENGTH_szSrcImageUrl];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szSrcImageUrl, (int)size4szSrcImageUrl);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  /* load member: this.szSrcRoleName */
  {
   Int32 size4szSrcRoleName = 32;
   if (this.szSrcRoleName.GetLength(0) < size4szSrcRoleName)
   {
    this.szSrcRoleName = new byte[LENGTH_szSrcRoleName];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szSrcRoleName, (int)size4szSrcRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  /* load member: this.iSrcRoleFlag */
  {
   ret = srcBuf.readInt32(ref this.iSrcRoleFlag);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.szDstRoleName */
  {
   Int32 size4szDstRoleName = 32;
   if (this.szDstRoleName.GetLength(0) < size4szDstRoleName)
   {
    this.szDstRoleName = new byte[LENGTH_szDstRoleName];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szDstRoleName, (int)size4szDstRoleName);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  /* load member: this.wTemplateId */
  {
   ret = srcBuf.readUInt16(ref this.wTemplateId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.szContent */
  {
   Int32 size4szContent = 128;
   if (this.szContent.GetLength(0) < size4szContent)
   {
    this.szContent = new byte[LENGTH_szContent];
   }

   /* load */
   ret = srcBuf.readCString(ref this.szContent, (int)size4szContent);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.wChannelId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[wChannelId]", "{0:d}", this.wChannelId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.ullSrcRoleId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[ullSrcRoleId]", "{0:d}", this.ullSrcRoleId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.szSrcImageUrl */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szSrcImageUrl]", this.szSrcImageUrl);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.szSrcRoleName */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szSrcRoleName]", this.szSrcRoleName);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iSrcRoleFlag */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iSrcRoleFlag]", "{0:d}", this.iSrcRoleFlag);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.szDstRoleName */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szDstRoleName]", this.szDstRoleName);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.wTemplateId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[wTemplateId]", "{0:d}", this.wTemplateId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.szContent */
  ret = TdrBufUtil.printString(ref destBuf, indent, separator, "[szContent]", this.szContent);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
 public static readonly uint LENGTH_szSrcImageUrl = 128;
 public static readonly uint LENGTH_szSrcRoleName = 32;
 public static readonly uint LENGTH_szDstRoleName = 32;
 public static readonly uint LENGTH_szContent = 128;
}


public class CSChat : tsf4g_csharp_interface
{
 /* public members */
 public ChatInfo stChatInfo;

 /* construct methods */
 public CSChat()
 {
  stChatInfo = new ChatInfo();
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSChat.CURRVERSION < cutVer)
  {
   cutVer = CSChat.CURRVERSION;
  }

  /* check cutversion */
  if (CSChat.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.stChatInfo */
  {
   ret = this.stChatInfo.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSChat.CURRVERSION < cutVer)
  {
   cutVer = CSChat.CURRVERSION;
  }

  /* check cutversion */
  if (CSChat.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.stChatInfo */
  {
   ret = this.stChatInfo.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSChat.CURRVERSION < cutVer)
  {
   cutVer = CSChat.CURRVERSION;
  }

  /* check cutversion */
  if (CSChat.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.stChatInfo */
  {
   ret = this.stChatInfo.load(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.stChatInfo */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stChatInfo]", true);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize children of this.stChatInfo */
  if (0 > indent)
  {
   ret = this.stChatInfo.visualize(ref destBuf, indent, separator);
  } else
  {
   ret = this.stChatInfo.visualize(ref destBuf, indent + 1, separator);
  }
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


public class SCChatNotify : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iChatNum;
 public ChatInfo[] astChatInfos; // 聊天信息

 /* construct methods */
 public SCChatNotify()
 {
  astChatInfos = new ChatInfo[40];
  for (int astChatInfos_i = 0; astChatInfos_i < 40; astChatInfos_i++)
  {
   astChatInfos[astChatInfos_i] = new ChatInfo();
  }

 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCChatNotify.CURRVERSION < cutVer)
  {
   cutVer = SCChatNotify.CURRVERSION;
  }

  /* check cutversion */
  if (SCChatNotify.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iChatNum */
  {
   ret = destBuf.writeInt32(this.iChatNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.astChatInfos */
  {
   if (0 > this.iChatNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
   }
   if (40 < this.iChatNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
   }

   if (this.astChatInfos.Length < this.iChatNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
   }

   for (Int32 astChatInfos_i = 0; astChatInfos_i < this.iChatNum; astChatInfos_i++)
   {
    ret = this.astChatInfos[astChatInfos_i].pack(ref destBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCChatNotify.CURRVERSION < cutVer)
  {
   cutVer = SCChatNotify.CURRVERSION;
  }

  /* check cutversion */
  if (SCChatNotify.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iChatNum */
  {
   ret = srcBuf.readInt32(ref this.iChatNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.astChatInfos */
  {
   if (0 > this.iChatNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
   }
   if (40 < this.iChatNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
   }

   {
    this.astChatInfos = new ChatInfo[this.iChatNum];
    for (Int32 astChatInfos_i = 0; astChatInfos_i < this.iChatNum; astChatInfos_i++)
    {
     this.astChatInfos[astChatInfos_i] = new ChatInfo();
    }
   }

   for (Int32 astChatInfos_i = 0; astChatInfos_i < this.iChatNum; astChatInfos_i++)
   {
    ret = this.astChatInfos[astChatInfos_i].unpack(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCChatNotify.CURRVERSION < cutVer)
  {
   cutVer = SCChatNotify.CURRVERSION;
  }

  /* check cutversion */
  if (SCChatNotify.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iChatNum */
  {
   ret = srcBuf.readInt32(ref this.iChatNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.astChatInfos */
  {
   if (this.astChatInfos.Length < 40)
   {
    this.astChatInfos = new ChatInfo[40];
    for (Int32 astChatInfos_i = 0; astChatInfos_i < 40; astChatInfos_i++)
    {
     this.astChatInfos[astChatInfos_i] = new ChatInfo();
    }
   }

   for (Int32 astChatInfos_i = 0; astChatInfos_i < 40; astChatInfos_i++)
   {
    ret = this.astChatInfos[astChatInfos_i].load(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iChatNum */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iChatNum]", "{0:d}", this.iChatNum);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.astChatInfos */
  if (0 > this.iChatNum)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_MINUS_REFER_VALUE;
  }
  if (40 < this.iChatNum)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
  }
  for (Int32 astChatInfos_i = 0; astChatInfos_i < this.iChatNum; astChatInfos_i++)
  {
   if (null == this.astChatInfos[astChatInfos_i])
   {
    continue;
   }

   ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[astChatInfos]", astChatInfos_i, true);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* visualize children of this.astChatInfos[astChatInfos_i] */
   if (0 > indent)
   {
    ret = this.astChatInfos[astChatInfos_i].visualize(ref destBuf, indent, separator);
   } else
   {
    ret = this.astChatInfos[astChatInfos_i].visualize(ref destBuf, indent + 1, separator);
   }
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


public class CData
{
 /* public members */
 public CSSynTime stCsSynTime; // syn time
 public CSQueryReloadTime stCsQueryReloadTime;
 public CSGetToken stCsGetToken; // get token
 public CSGetRole stCsGetRole;
 public CSCreateRole stCsCreateRole;
 public CSQueryName stCsQueryName; // 查询名字是否存在
 public CSCommRequest stCsResource; // 资源信息
 public CSCommRequest stCsMoneyInfo; // 查询金钱信息
 public CSCommRequest stCsBagInfo; // 查询包裹信息
 public CSUseItem stCsUseItem; // 使用道具
 public CSSellItem stCsSellItem; // 出售道具
 public CSComposeItem stCsComposeItem; // 合成道具
 public CSChat stCsChat; // 发起聊天
 public CSCommRequest stCsMailList; // 获取邮件列表
 public SCCommResponse stScMailDel; // 删除邮件
 public SCCommResponse stScMailGetExt; // 提取邮件
 public CSCommRequest stCsHeroList; // 查询伙伴列表
 public CSCreateHero stCsCreateHero;
 public CSHeroInfo stCsHeroInfo;
 public CSHeroAddExp stCsHeroAddExp;
 public CSHeroAddRank stCsHeroAddRank;
 public CSHeroAddStar stCsHeroAddStar;
 public CSHeroAddSkill stCsHeroAddSkill;
 public CSEquipInfoList stCsEquipInfoList; // 查询
 public CSEquipUpgrade stCsEquipUpgrade; // 升级
 public CSEquipAdvance stCsEquipAdvance; // 升阶
 public CSEquipRefine stCsEquipRefine; // 升星
 public CSEquipDeRefine stCsEquipDeRefine; // 降星


 /* constructor */
 public CData()
 {
 }

 public tsf4g_csharp_interface select(Int64 selector)
 {
  if(12 == selector)
  {
   if (this.stCsSynTime == null) this.stCsSynTime = new CSSynTime();
   return this.stCsSynTime;
  }
  else if(14 == selector)
  {
   if (this.stCsQueryReloadTime == null) this.stCsQueryReloadTime = new CSQueryReloadTime();
   return this.stCsQueryReloadTime;
  }
  else if(16 == selector)
  {
   if (this.stCsGetToken == null) this.stCsGetToken = new CSGetToken();
   return this.stCsGetToken;
  }
  else if(102 == selector)
  {
   if (this.stCsGetRole == null) this.stCsGetRole = new CSGetRole();
   return this.stCsGetRole;
  }
  else if(103 == selector)
  {
   if (this.stCsCreateRole == null) this.stCsCreateRole = new CSCreateRole();
   return this.stCsCreateRole;
  }
  else if(104 == selector)
  {
   if (this.stCsQueryName == null) this.stCsQueryName = new CSQueryName();
   return this.stCsQueryName;
  }
  else if(111 == selector)
  {
   if (this.stCsResource == null) this.stCsResource = new CSCommRequest();
   return this.stCsResource;
  }
  else if(112 == selector)
  {
   if (this.stCsMoneyInfo == null) this.stCsMoneyInfo = new CSCommRequest();
   return this.stCsMoneyInfo;
  }
  else if(113 == selector)
  {
   if (this.stCsBagInfo == null) this.stCsBagInfo = new CSCommRequest();
   return this.stCsBagInfo;
  }
  else if(121 == selector)
  {
   if (this.stCsUseItem == null) this.stCsUseItem = new CSUseItem();
   return this.stCsUseItem;
  }
  else if(122 == selector)
  {
   if (this.stCsSellItem == null) this.stCsSellItem = new CSSellItem();
   return this.stCsSellItem;
  }
  else if(123 == selector)
  {
   if (this.stCsComposeItem == null) this.stCsComposeItem = new CSComposeItem();
   return this.stCsComposeItem;
  }
  else if(131 == selector)
  {
   if (this.stCsChat == null) this.stCsChat = new CSChat();
   return this.stCsChat;
  }
  else if(141 == selector)
  {
   if (this.stCsMailList == null) this.stCsMailList = new CSCommRequest();
   return this.stCsMailList;
  }
  else if(142 == selector)
  {
   if (this.stScMailDel == null) this.stScMailDel = new SCCommResponse();
   return this.stScMailDel;
  }
  else if(143 == selector)
  {
   if (this.stScMailGetExt == null) this.stScMailGetExt = new SCCommResponse();
   return this.stScMailGetExt;
  }
  else if(201 == selector)
  {
   if (this.stCsHeroList == null) this.stCsHeroList = new CSCommRequest();
   return this.stCsHeroList;
  }
  else if(202 == selector)
  {
   if (this.stCsCreateHero == null) this.stCsCreateHero = new CSCreateHero();
   return this.stCsCreateHero;
  }
  else if(203 == selector)
  {
   if (this.stCsHeroInfo == null) this.stCsHeroInfo = new CSHeroInfo();
   return this.stCsHeroInfo;
  }
  else if(204 == selector)
  {
   if (this.stCsHeroAddExp == null) this.stCsHeroAddExp = new CSHeroAddExp();
   return this.stCsHeroAddExp;
  }
  else if(205 == selector)
  {
   if (this.stCsHeroAddRank == null) this.stCsHeroAddRank = new CSHeroAddRank();
   return this.stCsHeroAddRank;
  }
  else if(206 == selector)
  {
   if (this.stCsHeroAddStar == null) this.stCsHeroAddStar = new CSHeroAddStar();
   return this.stCsHeroAddStar;
  }
  else if(207 == selector)
  {
   if (this.stCsHeroAddSkill == null) this.stCsHeroAddSkill = new CSHeroAddSkill();
   return this.stCsHeroAddSkill;
  }
  else if(501 == selector)
  {
   if (this.stCsEquipInfoList == null) this.stCsEquipInfoList = new CSEquipInfoList();
   return this.stCsEquipInfoList;
  }
  else if(502 == selector)
  {
   if (this.stCsEquipUpgrade == null) this.stCsEquipUpgrade = new CSEquipUpgrade();
   return this.stCsEquipUpgrade;
  }
  else if(503 == selector)
  {
   if (this.stCsEquipAdvance == null) this.stCsEquipAdvance = new CSEquipAdvance();
   return this.stCsEquipAdvance;
  }
  else if(504 == selector)
  {
   if (this.stCsEquipRefine == null) this.stCsEquipRefine = new CSEquipRefine();
   return this.stCsEquipRefine;
  }
  else if(505 == selector)
  {
   if (this.stCsEquipDeRefine == null) this.stCsEquipDeRefine = new CSEquipDeRefine();
   return this.stCsEquipDeRefine;
  }
  return null;
 }

 /* construct function */
 public TdrError.ErrorType construct(Int64 selector)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  tsf4g_csharp_interface obj = select(selector);
  if (obj != null)
  {
   return obj.construct();
  }

  return ret;
 }

#if !(TSF4G_TDR_NO_PACK)
 /* pack function */
 public TdrError.ErrorType pack(Int64 selector, ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(selector, ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(Int64 selector, ref TdrWriteBuf destBuf, uint cutVer)
 {
  /* adjust cutversion */
  if (0 == cutVer || CData.CURRVERSION < cutVer)
  {
   cutVer = CData.CURRVERSION;
  }

  /* check cutversion */
  if (CData.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  if (12 == selector)
  {
   if (null == this.stCsSynTime)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsSynTime.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (14 == selector)
  {
   if (null == this.stCsQueryReloadTime)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsQueryReloadTime.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (16 == selector)
  {
   if (null == this.stCsGetToken)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsGetToken.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (102 == selector)
  {
   if (null == this.stCsGetRole)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsGetRole.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (103 == selector)
  {
   if (null == this.stCsCreateRole)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsCreateRole.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (104 == selector)
  {
   if (null == this.stCsQueryName)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsQueryName.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (111 == selector)
  {
   if (null == this.stCsResource)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsResource.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (112 == selector)
  {
   if (null == this.stCsMoneyInfo)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsMoneyInfo.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (113 == selector)
  {
   if (null == this.stCsBagInfo)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsBagInfo.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (121 == selector)
  {
   if (null == this.stCsUseItem)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsUseItem.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (122 == selector)
  {
   if (null == this.stCsSellItem)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsSellItem.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (123 == selector)
  {
   if (null == this.stCsComposeItem)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsComposeItem.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (131 == selector)
  {
   if (null == this.stCsChat)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsChat.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (141 == selector)
  {
   if (null == this.stCsMailList)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsMailList.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (142 == selector)
  {
   if (null == this.stScMailDel)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScMailDel.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (143 == selector)
  {
   if (null == this.stScMailGetExt)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScMailGetExt.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (201 == selector)
  {
   if (null == this.stCsHeroList)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsHeroList.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (202 == selector)
  {
   if (null == this.stCsCreateHero)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsCreateHero.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (203 == selector)
  {
   if (null == this.stCsHeroInfo)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsHeroInfo.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (204 == selector)
  {
   if (null == this.stCsHeroAddExp)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsHeroAddExp.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (205 == selector)
  {
   if (null == this.stCsHeroAddRank)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsHeroAddRank.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (206 == selector)
  {
   if (null == this.stCsHeroAddStar)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsHeroAddStar.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (207 == selector)
  {
   if (null == this.stCsHeroAddSkill)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsHeroAddSkill.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (501 == selector)
  {
   if (null == this.stCsEquipInfoList)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsEquipInfoList.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (502 == selector)
  {
   if (null == this.stCsEquipUpgrade)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsEquipUpgrade.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (503 == selector)
  {
   if (null == this.stCsEquipAdvance)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsEquipAdvance.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (504 == selector)
  {
   if (null == this.stCsEquipRefine)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsEquipRefine.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (505 == selector)
  {
   if (null == this.stCsEquipDeRefine)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stCsEquipDeRefine.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }

#endif  // TSF4G_TDR_NO_PACK

#if !(TSF4G_TDR_NO_UNPACK)
 /* unpack function */
 public TdrError.ErrorType unpack(Int64 selector, ref byte[] buffer,int size, ref int usedSize , uint cutVer)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer,size);
  TdrError.ErrorType ret = unpack(selector, ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(Int64 selector, ref TdrReadBuf srcBuf, uint cutVer)
 {
  /* adjust cutversion */
  if (0 == cutVer || CData.CURRVERSION < cutVer)
  {
   cutVer = CData.CURRVERSION;
  }

  /* check cutversion */
  if (CData.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  if (12 == selector)
  {
   if (null == this.stCsSynTime)
   {
    this.stCsSynTime = new CSSynTime();
   }


   ret = this.stCsSynTime.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (14 == selector)
  {
   if (null == this.stCsQueryReloadTime)
   {
    this.stCsQueryReloadTime = new CSQueryReloadTime();
   }


   ret = this.stCsQueryReloadTime.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (16 == selector)
  {
   if (null == this.stCsGetToken)
   {
    this.stCsGetToken = new CSGetToken();
   }


   ret = this.stCsGetToken.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (102 == selector)
  {
   if (null == this.stCsGetRole)
   {
    this.stCsGetRole = new CSGetRole();
   }


   ret = this.stCsGetRole.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (103 == selector)
  {
   if (null == this.stCsCreateRole)
   {
    this.stCsCreateRole = new CSCreateRole();
   }


   ret = this.stCsCreateRole.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (104 == selector)
  {
   if (null == this.stCsQueryName)
   {
    this.stCsQueryName = new CSQueryName();
   }


   ret = this.stCsQueryName.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (111 == selector)
  {
   if (null == this.stCsResource)
   {
    this.stCsResource = new CSCommRequest();
   }


   ret = this.stCsResource.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (112 == selector)
  {
   if (null == this.stCsMoneyInfo)
   {
    this.stCsMoneyInfo = new CSCommRequest();
   }


   ret = this.stCsMoneyInfo.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (113 == selector)
  {
   if (null == this.stCsBagInfo)
   {
    this.stCsBagInfo = new CSCommRequest();
   }


   ret = this.stCsBagInfo.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (121 == selector)
  {
   if (null == this.stCsUseItem)
   {
    this.stCsUseItem = new CSUseItem();
   }


   ret = this.stCsUseItem.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (122 == selector)
  {
   if (null == this.stCsSellItem)
   {
    this.stCsSellItem = new CSSellItem();
   }


   ret = this.stCsSellItem.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (123 == selector)
  {
   if (null == this.stCsComposeItem)
   {
    this.stCsComposeItem = new CSComposeItem();
   }


   ret = this.stCsComposeItem.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (131 == selector)
  {
   if (null == this.stCsChat)
   {
    this.stCsChat = new CSChat();
   }


   ret = this.stCsChat.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (141 == selector)
  {
   if (null == this.stCsMailList)
   {
    this.stCsMailList = new CSCommRequest();
   }


   ret = this.stCsMailList.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (142 == selector)
  {
   if (null == this.stScMailDel)
   {
    this.stScMailDel = new SCCommResponse();
   }


   ret = this.stScMailDel.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (143 == selector)
  {
   if (null == this.stScMailGetExt)
   {
    this.stScMailGetExt = new SCCommResponse();
   }


   ret = this.stScMailGetExt.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (201 == selector)
  {
   if (null == this.stCsHeroList)
   {
    this.stCsHeroList = new CSCommRequest();
   }


   ret = this.stCsHeroList.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (202 == selector)
  {
   if (null == this.stCsCreateHero)
   {
    this.stCsCreateHero = new CSCreateHero();
   }


   ret = this.stCsCreateHero.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (203 == selector)
  {
   if (null == this.stCsHeroInfo)
   {
    this.stCsHeroInfo = new CSHeroInfo();
   }


   ret = this.stCsHeroInfo.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (204 == selector)
  {
   if (null == this.stCsHeroAddExp)
   {
    this.stCsHeroAddExp = new CSHeroAddExp();
   }


   ret = this.stCsHeroAddExp.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (205 == selector)
  {
   if (null == this.stCsHeroAddRank)
   {
    this.stCsHeroAddRank = new CSHeroAddRank();
   }


   ret = this.stCsHeroAddRank.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (206 == selector)
  {
   if (null == this.stCsHeroAddStar)
   {
    this.stCsHeroAddStar = new CSHeroAddStar();
   }


   ret = this.stCsHeroAddStar.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (207 == selector)
  {
   if (null == this.stCsHeroAddSkill)
   {
    this.stCsHeroAddSkill = new CSHeroAddSkill();
   }


   ret = this.stCsHeroAddSkill.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (501 == selector)
  {
   if (null == this.stCsEquipInfoList)
   {
    this.stCsEquipInfoList = new CSEquipInfoList();
   }


   ret = this.stCsEquipInfoList.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (502 == selector)
  {
   if (null == this.stCsEquipUpgrade)
   {
    this.stCsEquipUpgrade = new CSEquipUpgrade();
   }


   ret = this.stCsEquipUpgrade.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (503 == selector)
  {
   if (null == this.stCsEquipAdvance)
   {
    this.stCsEquipAdvance = new CSEquipAdvance();
   }


   ret = this.stCsEquipAdvance.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (504 == selector)
  {
   if (null == this.stCsEquipRefine)
   {
    this.stCsEquipRefine = new CSEquipRefine();
   }


   ret = this.stCsEquipRefine.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (505 == selector)
  {
   if (null == this.stCsEquipDeRefine)
   {
    this.stCsEquipDeRefine = new CSEquipDeRefine();
   }


   ret = this.stCsEquipDeRefine.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }

#endif  // TSF4G_TDR_NO_UNPACK

#if !(TSF4G_TDR_NO_LOAD)
 /* load function */
 public TdrError.ErrorType load(Int64 selector, ref byte[] buffer,int size, ref int usedSize , uint cutVer)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer,size);
  TdrError.ErrorType ret = load(selector, ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(Int64 selector, ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  /* adjust cutversion */
  if (0 == cutVer || CData.CURRVERSION < cutVer)
  {
   cutVer = CData.CURRVERSION;
  }

  /* check cutversion */
  if (CData.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  tsf4g_csharp_interface obj = select(selector);
  if (obj != null)
  {
   return obj.load(ref srcBuf, cutVer);
  }

  return ret;
 }

#endif  // TSF4G_TDR_NO_LOAD

#if !(TSF4G_TDR_NO_VISUALIZE)
 /* visualize function */
 public TdrError.ErrorType visualize(Int64 selector, ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(selector, ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 public TdrError.ErrorType visualize(Int64 selector, ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  tsf4g_csharp_interface obj = select(selector);
  if (obj != null)
  {
   return obj.visualize(ref destBuf, indent, separator);
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE

 /* version infomation */
 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


public class SData
{
 /* public members */
 public SCServerKick stScServerKick; // 用于服务器端主动断线事件
 public SCSynTime stScSynTime; // syn time
 public SCQueryReloadTime stScQueryReloadTime;
 public SCServerReload stScServerReload;
 public SCGetToken stScGetToken; // get token
 public SCCommResponse stScCommResponse; // 默认应答包，只有返回值
 public SCCommResponse1 stScCommResponse1; // 通用返回包，带1参数
 public SCCommResponse2 stScCommResponse2; // 通用返回包，带2参数
 public SCRoleID stScRoleID;
 public SCRoleInfo stScRoleInfo;
 public SCCommResponse1 stScCreateRole; // ret:0成功,para1:RoleId
 public SCCommResponse stScQueryName; // 查询名字是否存在,1存在，0不存在
 public SCResource stScResource; // 资源信息
 public SCMoneyInfo stScMoneyInfo; // 查询金钱信息响应
 public SCBagInfo stScBagInfo; // 包裹信息(增量、全量)
 public SCRewardNotify stScRewardNotify; // 奖励通知
 public SCCommResponse stScUseItem; // 使用道具
 public SCCommResponse1 stScSellItem; // 出售道具,para1:获得金钱
 public CSComposeItem stScComposeItem; // 合成道具
 public SCCommResponse stScChat;
 public SCChatNotify stScChatNotify;
 public SCHeroList stScHeroList;
 public SCCommResponse stScCreateHero;
 public SCHeroInfo stScHeroInfo;
 public SCCommResponse stScHeroAddExp;
 public SCCommResponse stScHeroAddRank;
 public SCCommResponse stScHeroAddStar;
 public SCCommResponse stScHeroAddSkill;
 public SCEquipInfoList stScEquipInfoList; // 查询
 public SCCommResponse stScEquipUpgrade; // 升级
 public SCCommResponse stScEquipAdvance; // 升阶
 public SCCommResponse stScEquipRefine; // 升星
 public SCCommResponse stScEquipDeRefine; // 降星


 /* constructor */
 public SData()
 {
 }

 public tsf4g_csharp_interface select(Int64 selector)
 {
  if(11 == selector)
  {
   if (this.stScServerKick == null) this.stScServerKick = new SCServerKick();
   return this.stScServerKick;
  }
  else if(12 == selector)
  {
   if (this.stScSynTime == null) this.stScSynTime = new SCSynTime();
   return this.stScSynTime;
  }
  else if(14 == selector)
  {
   if (this.stScQueryReloadTime == null) this.stScQueryReloadTime = new SCQueryReloadTime();
   return this.stScQueryReloadTime;
  }
  else if(15 == selector)
  {
   if (this.stScServerReload == null) this.stScServerReload = new SCServerReload();
   return this.stScServerReload;
  }
  else if(16 == selector)
  {
   if (this.stScGetToken == null) this.stScGetToken = new SCGetToken();
   return this.stScGetToken;
  }
  else if(21 == selector)
  {
   if (this.stScCommResponse == null) this.stScCommResponse = new SCCommResponse();
   return this.stScCommResponse;
  }
  else if(22 == selector)
  {
   if (this.stScCommResponse1 == null) this.stScCommResponse1 = new SCCommResponse1();
   return this.stScCommResponse1;
  }
  else if(23 == selector)
  {
   if (this.stScCommResponse2 == null) this.stScCommResponse2 = new SCCommResponse2();
   return this.stScCommResponse2;
  }
  else if(101 == selector)
  {
   if (this.stScRoleID == null) this.stScRoleID = new SCRoleID();
   return this.stScRoleID;
  }
  else if(102 == selector)
  {
   if (this.stScRoleInfo == null) this.stScRoleInfo = new SCRoleInfo();
   return this.stScRoleInfo;
  }
  else if(103 == selector)
  {
   if (this.stScCreateRole == null) this.stScCreateRole = new SCCommResponse1();
   return this.stScCreateRole;
  }
  else if(104 == selector)
  {
   if (this.stScQueryName == null) this.stScQueryName = new SCCommResponse();
   return this.stScQueryName;
  }
  else if(111 == selector)
  {
   if (this.stScResource == null) this.stScResource = new SCResource();
   return this.stScResource;
  }
  else if(112 == selector)
  {
   if (this.stScMoneyInfo == null) this.stScMoneyInfo = new SCMoneyInfo();
   return this.stScMoneyInfo;
  }
  else if(113 == selector)
  {
   if (this.stScBagInfo == null) this.stScBagInfo = new SCBagInfo();
   return this.stScBagInfo;
  }
  else if(114 == selector)
  {
   if (this.stScRewardNotify == null) this.stScRewardNotify = new SCRewardNotify();
   return this.stScRewardNotify;
  }
  else if(121 == selector)
  {
   if (this.stScUseItem == null) this.stScUseItem = new SCCommResponse();
   return this.stScUseItem;
  }
  else if(122 == selector)
  {
   if (this.stScSellItem == null) this.stScSellItem = new SCCommResponse1();
   return this.stScSellItem;
  }
  else if(123 == selector)
  {
   if (this.stScComposeItem == null) this.stScComposeItem = new CSComposeItem();
   return this.stScComposeItem;
  }
  else if(131 == selector)
  {
   if (this.stScChat == null) this.stScChat = new SCCommResponse();
   return this.stScChat;
  }
  else if(132 == selector)
  {
   if (this.stScChatNotify == null) this.stScChatNotify = new SCChatNotify();
   return this.stScChatNotify;
  }
  else if(201 == selector)
  {
   if (this.stScHeroList == null) this.stScHeroList = new SCHeroList();
   return this.stScHeroList;
  }
  else if(202 == selector)
  {
   if (this.stScCreateHero == null) this.stScCreateHero = new SCCommResponse();
   return this.stScCreateHero;
  }
  else if(203 == selector)
  {
   if (this.stScHeroInfo == null) this.stScHeroInfo = new SCHeroInfo();
   return this.stScHeroInfo;
  }
  else if(204 == selector)
  {
   if (this.stScHeroAddExp == null) this.stScHeroAddExp = new SCCommResponse();
   return this.stScHeroAddExp;
  }
  else if(205 == selector)
  {
   if (this.stScHeroAddRank == null) this.stScHeroAddRank = new SCCommResponse();
   return this.stScHeroAddRank;
  }
  else if(206 == selector)
  {
   if (this.stScHeroAddStar == null) this.stScHeroAddStar = new SCCommResponse();
   return this.stScHeroAddStar;
  }
  else if(207 == selector)
  {
   if (this.stScHeroAddSkill == null) this.stScHeroAddSkill = new SCCommResponse();
   return this.stScHeroAddSkill;
  }
  else if(501 == selector)
  {
   if (this.stScEquipInfoList == null) this.stScEquipInfoList = new SCEquipInfoList();
   return this.stScEquipInfoList;
  }
  else if(502 == selector)
  {
   if (this.stScEquipUpgrade == null) this.stScEquipUpgrade = new SCCommResponse();
   return this.stScEquipUpgrade;
  }
  else if(503 == selector)
  {
   if (this.stScEquipAdvance == null) this.stScEquipAdvance = new SCCommResponse();
   return this.stScEquipAdvance;
  }
  else if(504 == selector)
  {
   if (this.stScEquipRefine == null) this.stScEquipRefine = new SCCommResponse();
   return this.stScEquipRefine;
  }
  else if(505 == selector)
  {
   if (this.stScEquipDeRefine == null) this.stScEquipDeRefine = new SCCommResponse();
   return this.stScEquipDeRefine;
  }
  return null;
 }

 /* construct function */
 public TdrError.ErrorType construct(Int64 selector)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  tsf4g_csharp_interface obj = select(selector);
  if (obj != null)
  {
   return obj.construct();
  }

  return ret;
 }

#if !(TSF4G_TDR_NO_PACK)
 /* pack function */
 public TdrError.ErrorType pack(Int64 selector, ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(selector, ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(Int64 selector, ref TdrWriteBuf destBuf, uint cutVer)
 {
  /* adjust cutversion */
  if (0 == cutVer || SData.CURRVERSION < cutVer)
  {
   cutVer = SData.CURRVERSION;
  }

  /* check cutversion */
  if (SData.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  if (11 == selector)
  {
   if (null == this.stScServerKick)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScServerKick.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (12 == selector)
  {
   if (null == this.stScSynTime)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScSynTime.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (14 == selector)
  {
   if (null == this.stScQueryReloadTime)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScQueryReloadTime.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (15 == selector)
  {
   if (null == this.stScServerReload)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScServerReload.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (16 == selector)
  {
   if (null == this.stScGetToken)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScGetToken.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (21 == selector)
  {
   if (null == this.stScCommResponse)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScCommResponse.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (22 == selector)
  {
   if (null == this.stScCommResponse1)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScCommResponse1.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (23 == selector)
  {
   if (null == this.stScCommResponse2)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScCommResponse2.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (101 == selector)
  {
   if (null == this.stScRoleID)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScRoleID.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (102 == selector)
  {
   if (null == this.stScRoleInfo)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScRoleInfo.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (103 == selector)
  {
   if (null == this.stScCreateRole)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScCreateRole.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (104 == selector)
  {
   if (null == this.stScQueryName)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScQueryName.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (111 == selector)
  {
   if (null == this.stScResource)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScResource.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (112 == selector)
  {
   if (null == this.stScMoneyInfo)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScMoneyInfo.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (113 == selector)
  {
   if (null == this.stScBagInfo)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScBagInfo.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (114 == selector)
  {
   if (null == this.stScRewardNotify)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScRewardNotify.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (121 == selector)
  {
   if (null == this.stScUseItem)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScUseItem.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (122 == selector)
  {
   if (null == this.stScSellItem)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScSellItem.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (123 == selector)
  {
   if (null == this.stScComposeItem)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScComposeItem.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (131 == selector)
  {
   if (null == this.stScChat)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScChat.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (132 == selector)
  {
   if (null == this.stScChatNotify)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScChatNotify.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (201 == selector)
  {
   if (null == this.stScHeroList)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScHeroList.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (202 == selector)
  {
   if (null == this.stScCreateHero)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScCreateHero.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (203 == selector)
  {
   if (null == this.stScHeroInfo)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScHeroInfo.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (204 == selector)
  {
   if (null == this.stScHeroAddExp)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScHeroAddExp.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (205 == selector)
  {
   if (null == this.stScHeroAddRank)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScHeroAddRank.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (206 == selector)
  {
   if (null == this.stScHeroAddStar)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScHeroAddStar.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (207 == selector)
  {
   if (null == this.stScHeroAddSkill)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScHeroAddSkill.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (501 == selector)
  {
   if (null == this.stScEquipInfoList)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScEquipInfoList.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (502 == selector)
  {
   if (null == this.stScEquipUpgrade)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScEquipUpgrade.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (503 == selector)
  {
   if (null == this.stScEquipAdvance)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScEquipAdvance.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (504 == selector)
  {
   if (null == this.stScEquipRefine)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScEquipRefine.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (505 == selector)
  {
   if (null == this.stScEquipDeRefine)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_UNION_SELECTE_FIELD_IS_NULL;
   }

   ret = this.stScEquipDeRefine.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }

#endif  // TSF4G_TDR_NO_PACK

#if !(TSF4G_TDR_NO_UNPACK)
 /* unpack function */
 public TdrError.ErrorType unpack(Int64 selector, ref byte[] buffer,int size, ref int usedSize , uint cutVer)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer,size);
  TdrError.ErrorType ret = unpack(selector, ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(Int64 selector, ref TdrReadBuf srcBuf, uint cutVer)
 {
  /* adjust cutversion */
  if (0 == cutVer || SData.CURRVERSION < cutVer)
  {
   cutVer = SData.CURRVERSION;
  }

  /* check cutversion */
  if (SData.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  if (11 == selector)
  {
   if (null == this.stScServerKick)
   {
    this.stScServerKick = new SCServerKick();
   }


   ret = this.stScServerKick.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (12 == selector)
  {
   if (null == this.stScSynTime)
   {
    this.stScSynTime = new SCSynTime();
   }


   ret = this.stScSynTime.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (14 == selector)
  {
   if (null == this.stScQueryReloadTime)
   {
    this.stScQueryReloadTime = new SCQueryReloadTime();
   }


   ret = this.stScQueryReloadTime.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (15 == selector)
  {
   if (null == this.stScServerReload)
   {
    this.stScServerReload = new SCServerReload();
   }


   ret = this.stScServerReload.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (16 == selector)
  {
   if (null == this.stScGetToken)
   {
    this.stScGetToken = new SCGetToken();
   }


   ret = this.stScGetToken.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (21 == selector)
  {
   if (null == this.stScCommResponse)
   {
    this.stScCommResponse = new SCCommResponse();
   }


   ret = this.stScCommResponse.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (22 == selector)
  {
   if (null == this.stScCommResponse1)
   {
    this.stScCommResponse1 = new SCCommResponse1();
   }


   ret = this.stScCommResponse1.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (23 == selector)
  {
   if (null == this.stScCommResponse2)
   {
    this.stScCommResponse2 = new SCCommResponse2();
   }


   ret = this.stScCommResponse2.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (101 == selector)
  {
   if (null == this.stScRoleID)
   {
    this.stScRoleID = new SCRoleID();
   }


   ret = this.stScRoleID.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (102 == selector)
  {
   if (null == this.stScRoleInfo)
   {
    this.stScRoleInfo = new SCRoleInfo();
   }


   ret = this.stScRoleInfo.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (103 == selector)
  {
   if (null == this.stScCreateRole)
   {
    this.stScCreateRole = new SCCommResponse1();
   }


   ret = this.stScCreateRole.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (104 == selector)
  {
   if (null == this.stScQueryName)
   {
    this.stScQueryName = new SCCommResponse();
   }


   ret = this.stScQueryName.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (111 == selector)
  {
   if (null == this.stScResource)
   {
    this.stScResource = new SCResource();
   }


   ret = this.stScResource.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (112 == selector)
  {
   if (null == this.stScMoneyInfo)
   {
    this.stScMoneyInfo = new SCMoneyInfo();
   }


   ret = this.stScMoneyInfo.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (113 == selector)
  {
   if (null == this.stScBagInfo)
   {
    this.stScBagInfo = new SCBagInfo();
   }


   ret = this.stScBagInfo.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (114 == selector)
  {
   if (null == this.stScRewardNotify)
   {
    this.stScRewardNotify = new SCRewardNotify();
   }


   ret = this.stScRewardNotify.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (121 == selector)
  {
   if (null == this.stScUseItem)
   {
    this.stScUseItem = new SCCommResponse();
   }


   ret = this.stScUseItem.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (122 == selector)
  {
   if (null == this.stScSellItem)
   {
    this.stScSellItem = new SCCommResponse1();
   }


   ret = this.stScSellItem.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (123 == selector)
  {
   if (null == this.stScComposeItem)
   {
    this.stScComposeItem = new CSComposeItem();
   }


   ret = this.stScComposeItem.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (131 == selector)
  {
   if (null == this.stScChat)
   {
    this.stScChat = new SCCommResponse();
   }


   ret = this.stScChat.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (132 == selector)
  {
   if (null == this.stScChatNotify)
   {
    this.stScChatNotify = new SCChatNotify();
   }


   ret = this.stScChatNotify.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (201 == selector)
  {
   if (null == this.stScHeroList)
   {
    this.stScHeroList = new SCHeroList();
   }


   ret = this.stScHeroList.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (202 == selector)
  {
   if (null == this.stScCreateHero)
   {
    this.stScCreateHero = new SCCommResponse();
   }


   ret = this.stScCreateHero.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (203 == selector)
  {
   if (null == this.stScHeroInfo)
   {
    this.stScHeroInfo = new SCHeroInfo();
   }


   ret = this.stScHeroInfo.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (204 == selector)
  {
   if (null == this.stScHeroAddExp)
   {
    this.stScHeroAddExp = new SCCommResponse();
   }


   ret = this.stScHeroAddExp.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (205 == selector)
  {
   if (null == this.stScHeroAddRank)
   {
    this.stScHeroAddRank = new SCCommResponse();
   }


   ret = this.stScHeroAddRank.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (206 == selector)
  {
   if (null == this.stScHeroAddStar)
   {
    this.stScHeroAddStar = new SCCommResponse();
   }


   ret = this.stScHeroAddStar.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (207 == selector)
  {
   if (null == this.stScHeroAddSkill)
   {
    this.stScHeroAddSkill = new SCCommResponse();
   }


   ret = this.stScHeroAddSkill.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (501 == selector)
  {
   if (null == this.stScEquipInfoList)
   {
    this.stScEquipInfoList = new SCEquipInfoList();
   }


   ret = this.stScEquipInfoList.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (502 == selector)
  {
   if (null == this.stScEquipUpgrade)
   {
    this.stScEquipUpgrade = new SCCommResponse();
   }


   ret = this.stScEquipUpgrade.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (503 == selector)
  {
   if (null == this.stScEquipAdvance)
   {
    this.stScEquipAdvance = new SCCommResponse();
   }


   ret = this.stScEquipAdvance.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (504 == selector)
  {
   if (null == this.stScEquipRefine)
   {
    this.stScEquipRefine = new SCCommResponse();
   }


   ret = this.stScEquipRefine.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }
  else if (505 == selector)
  {
   if (null == this.stScEquipDeRefine)
   {
    this.stScEquipDeRefine = new SCCommResponse();
   }


   ret = this.stScEquipDeRefine.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }

#endif  // TSF4G_TDR_NO_UNPACK

#if !(TSF4G_TDR_NO_LOAD)
 /* load function */
 public TdrError.ErrorType load(Int64 selector, ref byte[] buffer,int size, ref int usedSize , uint cutVer)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer,size);
  TdrError.ErrorType ret = load(selector, ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(Int64 selector, ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  /* adjust cutversion */
  if (0 == cutVer || SData.CURRVERSION < cutVer)
  {
   cutVer = SData.CURRVERSION;
  }

  /* check cutversion */
  if (SData.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  tsf4g_csharp_interface obj = select(selector);
  if (obj != null)
  {
   return obj.load(ref srcBuf, cutVer);
  }

  return ret;
 }

#endif  // TSF4G_TDR_NO_LOAD

#if !(TSF4G_TDR_NO_VISUALIZE)
 /* visualize function */
 public TdrError.ErrorType visualize(Int64 selector, ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(selector, ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 public TdrError.ErrorType visualize(Int64 selector, ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  tsf4g_csharp_interface obj = select(selector);
  if (obj != null)
  {
   return obj.visualize(ref destBuf, indent, separator);
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE

 /* version infomation */
 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


public class CMSG : tsf4g_csharp_interface
{
 /* public members */
 public UInt16 wCmdId; // Cmd Id
 public Int32 iSeq; // 请求序列号
 public CData stBody;

 /* construct methods */
 public CMSG()
 {
  stBody = new CData();
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  this.wCmdId = 0;

  this.iSeq = 0;

  Int64 selector4stBody = this.wCmdId;
  ret = this.stBody.construct(selector4stBody);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CMSG.CURRVERSION < cutVer)
  {
   cutVer = CMSG.CURRVERSION;
  }

  /* check cutversion */
  if (CMSG.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.wCmdId */
  {
   ret = destBuf.writeUInt16(this.wCmdId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iSeq */
  {
   ret = destBuf.writeInt32(this.iSeq);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.stBody */
  {
   Int64 selector4stBody = this.wCmdId;
   ret = this.stBody.pack(selector4stBody, ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CMSG.CURRVERSION < cutVer)
  {
   cutVer = CMSG.CURRVERSION;
  }

  /* check cutversion */
  if (CMSG.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.wCmdId */
  {
   ret = srcBuf.readUInt16(ref this.wCmdId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iSeq */
  {
   ret = srcBuf.readInt32(ref this.iSeq);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.stBody */
  {
   Int64 selector4stBody = this.wCmdId;
   ret = this.stBody.unpack(selector4stBody, ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CMSG.CURRVERSION < cutVer)
  {
   cutVer = CMSG.CURRVERSION;
  }

  /* check cutversion */
  if (CMSG.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.wCmdId */
  {
   ret = srcBuf.readUInt16(ref this.wCmdId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iSeq */
  {
   ret = srcBuf.readInt32(ref this.iSeq);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.stBody */
  {
   Int64 selector4stBody = this.wCmdId;
   ret = this.stBody.load(selector4stBody, ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.wCmdId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[wCmdId]", "{0:d}", this.wCmdId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iSeq */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iSeq]", "{0:d}", this.iSeq);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.stBody */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stBody]", true);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize children of this.stBody */
  Int64 selector4stBody = this.wCmdId;
  if (0 > indent)
  {
   ret = this.stBody.visualize(selector4stBody, ref destBuf, indent, separator);
  } else
  {
   ret = this.stBody.visualize(selector4stBody, ref destBuf, indent + 1, separator);
  }
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


public class SMSG : tsf4g_csharp_interface
{
 /* public members */
 public UInt16 wCmdId; // Cmd Id
 public Int32 iSeq; // 请求序列号
 public Int32 iEno; // 错误码
 public SData stBody;

 /* construct methods */
 public SMSG()
 {
  stBody = new SData();
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SMSG.CURRVERSION < cutVer)
  {
   cutVer = SMSG.CURRVERSION;
  }

  /* check cutversion */
  if (SMSG.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.wCmdId */
  {
   ret = destBuf.writeUInt16(this.wCmdId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iSeq */
  {
   ret = destBuf.writeInt32(this.iSeq);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iEno */
  {
   ret = destBuf.writeInt32(this.iEno);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.stBody */
  {
   Int64 selector4stBody = this.wCmdId;
   ret = this.stBody.pack(selector4stBody, ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SMSG.CURRVERSION < cutVer)
  {
   cutVer = SMSG.CURRVERSION;
  }

  /* check cutversion */
  if (SMSG.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.wCmdId */
  {
   ret = srcBuf.readUInt16(ref this.wCmdId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iSeq */
  {
   ret = srcBuf.readInt32(ref this.iSeq);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iEno */
  {
   ret = srcBuf.readInt32(ref this.iEno);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.stBody */
  {
   Int64 selector4stBody = this.wCmdId;
   ret = this.stBody.unpack(selector4stBody, ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SMSG.CURRVERSION < cutVer)
  {
   cutVer = SMSG.CURRVERSION;
  }

  /* check cutversion */
  if (SMSG.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.wCmdId */
  {
   ret = srcBuf.readUInt16(ref this.wCmdId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iSeq */
  {
   ret = srcBuf.readInt32(ref this.iSeq);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iEno */
  {
   ret = srcBuf.readInt32(ref this.iEno);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.stBody */
  {
   Int64 selector4stBody = this.wCmdId;
   ret = this.stBody.load(selector4stBody, ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.wCmdId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[wCmdId]", "{0:d}", this.wCmdId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iSeq */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iSeq]", "{0:d}", this.iSeq);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iEno */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iEno]", "{0:d}", this.iEno);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.stBody */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stBody]", true);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize children of this.stBody */
  Int64 selector4stBody = this.wCmdId;
  if (0 > indent)
  {
   ret = this.stBody.visualize(selector4stBody, ref destBuf, indent, separator);
  } else
  {
   ret = this.stBody.visualize(selector4stBody, ref destBuf, indent + 1, separator);
  }
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


}
