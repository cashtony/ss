/* This file is generated by tdr. */
/* No manual modification is permitted. */

/* metalib version: 101 */
/* metalib md5sum: f8305675cf6b3330d5923f3f17b6f7be */

/* creation time: Thu Aug 18 18:14:29 2016 */
/* tdr version: 2.7.12, build at 20151212 */


using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using tsf4g_tdr_csharp;

namespace GSProtocal
{


public class MACROS_GSPROTOCAL_HERO
{
 public const int GS_MAX_HERO_NUM = 100; // 最大英雄数量
 public const int GS_HERO_ATTR_NUM = 40; // 属性数量
 public const int GS_HERO_SKILL_NUM = 6; // 技能数量
 public const int GS_HERO_EQUIP_NUM = 6; // 装备数量
 public const int GS_HERO_SOUL_NUM = 4; // 战魂数量
 public const int GS_EQUIP_UPGRADE_ITEM_NUM = 4; // 装备升级使用的道具数量
}


public class CHeroAttr : tsf4g_csharp_interface
{
 /* public members */
 public UInt32[] attrValue; // 下标见ATTRIBUTE_DEF

 /* construct methods */
 public CHeroAttr()
 {
  attrValue = new UInt32[40];
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CHeroAttr.CURRVERSION < cutVer)
  {
   cutVer = CHeroAttr.CURRVERSION;
  }

  /* check cutversion */
  if (CHeroAttr.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.attrValue */
  {
   for (Int32 attrValue_i = 0; attrValue_i < 40; attrValue_i++)
   {
    ret = destBuf.writeUInt32(this.attrValue[attrValue_i]);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CHeroAttr.CURRVERSION < cutVer)
  {
   cutVer = CHeroAttr.CURRVERSION;
  }

  /* check cutversion */
  if (CHeroAttr.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.attrValue */
  {
   for (Int32 attrValue_i = 0; attrValue_i < 40; attrValue_i++)
   {
    ret = srcBuf.readUInt32(ref this.attrValue[attrValue_i]);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CHeroAttr.CURRVERSION < cutVer)
  {
   cutVer = CHeroAttr.CURRVERSION;
  }

  /* check cutversion */
  if (CHeroAttr.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.attrValue */
  {
   for (Int32 attrValue_i = 0; attrValue_i < 40; attrValue_i++)
   {
    ret = srcBuf.readUInt32(ref this.attrValue[attrValue_i]);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.attrValue */
  ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[attrValue]", 40);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }
  for (Int32 attrValue_i = 0; attrValue_i < 40; attrValue_i++)
  {
   ret = destBuf.sprintf("{0:d}", this.attrValue[attrValue_i]);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  ret = destBuf.sprintf("{0}",separator);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


public class CHeroSimpleInfo : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iHeroProtoId; // hero Id
 public byte bLevel;
 public UInt32 dwExp; // 经验
 public byte bRank; // 品质
 public byte bStar; // 星级
 public UInt32 dwCombat; // 战斗力

 /* construct methods */
 public CHeroSimpleInfo()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CHeroSimpleInfo.CURRVERSION < cutVer)
  {
   cutVer = CHeroSimpleInfo.CURRVERSION;
  }

  /* check cutversion */
  if (CHeroSimpleInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iHeroProtoId */
  {
   ret = destBuf.writeInt32(this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.bLevel */
  {
   ret = destBuf.writeUInt8(this.bLevel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.dwExp */
  {
   ret = destBuf.writeUInt32(this.dwExp);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.bRank */
  {
   ret = destBuf.writeUInt8(this.bRank);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.bStar */
  {
   ret = destBuf.writeUInt8(this.bStar);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.dwCombat */
  {
   ret = destBuf.writeUInt32(this.dwCombat);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CHeroSimpleInfo.CURRVERSION < cutVer)
  {
   cutVer = CHeroSimpleInfo.CURRVERSION;
  }

  /* check cutversion */
  if (CHeroSimpleInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.bLevel */
  {
   ret = srcBuf.readUInt8(ref this.bLevel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.dwExp */
  {
   ret = srcBuf.readUInt32(ref this.dwExp);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.bRank */
  {
   ret = srcBuf.readUInt8(ref this.bRank);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.bStar */
  {
   ret = srcBuf.readUInt8(ref this.bStar);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.dwCombat */
  {
   ret = srcBuf.readUInt32(ref this.dwCombat);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CHeroSimpleInfo.CURRVERSION < cutVer)
  {
   cutVer = CHeroSimpleInfo.CURRVERSION;
  }

  /* check cutversion */
  if (CHeroSimpleInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.bLevel */
  {
   ret = srcBuf.readUInt8(ref this.bLevel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.dwExp */
  {
   ret = srcBuf.readUInt32(ref this.dwExp);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.bRank */
  {
   ret = srcBuf.readUInt8(ref this.bRank);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.bStar */
  {
   ret = srcBuf.readUInt8(ref this.bStar);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.dwCombat */
  {
   ret = srcBuf.readUInt32(ref this.dwCombat);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iHeroProtoId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iHeroProtoId]", "{0:d}", this.iHeroProtoId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.bLevel */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bLevel]", "0x{0:x2}", this.bLevel);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.dwExp */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[dwExp]", "{0:d}", this.dwExp);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.bRank */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bRank]", "0x{0:x2}", this.bRank);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.bStar */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bStar]", "0x{0:x2}", this.bStar);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.dwCombat */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[dwCombat]", "{0:d}", this.dwCombat);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 伙伴列表 */
public class SCHeroList : tsf4g_csharp_interface
{
 /* public members */
 public UInt16 wHeroNum;
 public CHeroSimpleInfo[] astHeroInfos;

 /* construct methods */
 public SCHeroList()
 {
  astHeroInfos = new CHeroSimpleInfo[100];
  for (int astHeroInfos_i = 0; astHeroInfos_i < 100; astHeroInfos_i++)
  {
   astHeroInfos[astHeroInfos_i] = new CHeroSimpleInfo();
  }

 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCHeroList.CURRVERSION < cutVer)
  {
   cutVer = SCHeroList.CURRVERSION;
  }

  /* check cutversion */
  if (SCHeroList.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.wHeroNum */
  {
   ret = destBuf.writeUInt16(this.wHeroNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.astHeroInfos */
  {
   if (100 < this.wHeroNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
   }

   if (this.astHeroInfos.Length < this.wHeroNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
   }

   for (Int32 astHeroInfos_i = 0; astHeroInfos_i < this.wHeroNum; astHeroInfos_i++)
   {
    ret = this.astHeroInfos[astHeroInfos_i].pack(ref destBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCHeroList.CURRVERSION < cutVer)
  {
   cutVer = SCHeroList.CURRVERSION;
  }

  /* check cutversion */
  if (SCHeroList.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.wHeroNum */
  {
   ret = srcBuf.readUInt16(ref this.wHeroNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.astHeroInfos */
  {
   if (100 < this.wHeroNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
   }

   {
    this.astHeroInfos = new CHeroSimpleInfo[this.wHeroNum];
    for (Int32 astHeroInfos_i = 0; astHeroInfos_i < this.wHeroNum; astHeroInfos_i++)
    {
     this.astHeroInfos[astHeroInfos_i] = new CHeroSimpleInfo();
    }
   }

   for (Int32 astHeroInfos_i = 0; astHeroInfos_i < this.wHeroNum; astHeroInfos_i++)
   {
    ret = this.astHeroInfos[astHeroInfos_i].unpack(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCHeroList.CURRVERSION < cutVer)
  {
   cutVer = SCHeroList.CURRVERSION;
  }

  /* check cutversion */
  if (SCHeroList.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.wHeroNum */
  {
   ret = srcBuf.readUInt16(ref this.wHeroNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.astHeroInfos */
  {
   if (this.astHeroInfos.Length < 100)
   {
    this.astHeroInfos = new CHeroSimpleInfo[100];
    for (Int32 astHeroInfos_i = 0; astHeroInfos_i < 100; astHeroInfos_i++)
    {
     this.astHeroInfos[astHeroInfos_i] = new CHeroSimpleInfo();
    }
   }

   for (Int32 astHeroInfos_i = 0; astHeroInfos_i < 100; astHeroInfos_i++)
   {
    ret = this.astHeroInfos[astHeroInfos_i].load(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.wHeroNum */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[wHeroNum]", "{0:d}", this.wHeroNum);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.astHeroInfos */
  if (100 < this.wHeroNum)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
  }
  for (Int32 astHeroInfos_i = 0; astHeroInfos_i < this.wHeroNum; astHeroInfos_i++)
  {
   if (null == this.astHeroInfos[astHeroInfos_i])
   {
    continue;
   }

   ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[astHeroInfos]", astHeroInfos_i, true);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* visualize children of this.astHeroInfos[astHeroInfos_i] */
   if (0 > indent)
   {
    ret = this.astHeroInfos[astHeroInfos_i].visualize(ref destBuf, indent, separator);
   } else
   {
    ret = this.astHeroInfos[astHeroInfos_i].visualize(ref destBuf, indent + 1, separator);
   }
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 激活新伙伴 */
public class CSCreateHero : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iHeroProtoId; // 伙伴原型表ID

 /* construct methods */
 public CSCreateHero()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSCreateHero.CURRVERSION < cutVer)
  {
   cutVer = CSCreateHero.CURRVERSION;
  }

  /* check cutversion */
  if (CSCreateHero.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iHeroProtoId */
  {
   ret = destBuf.writeInt32(this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSCreateHero.CURRVERSION < cutVer)
  {
   cutVer = CSCreateHero.CURRVERSION;
  }

  /* check cutversion */
  if (CSCreateHero.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSCreateHero.CURRVERSION < cutVer)
  {
   cutVer = CSCreateHero.CURRVERSION;
  }

  /* check cutversion */
  if (CSCreateHero.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iHeroProtoId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iHeroProtoId]", "{0:d}", this.iHeroProtoId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 查询伙伴详细信息 */
public class CSHeroInfo : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iHeroProtoId; // 伙伴原型表ID

 /* construct methods */
 public CSHeroInfo()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroInfo.CURRVERSION < cutVer)
  {
   cutVer = CSHeroInfo.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iHeroProtoId */
  {
   ret = destBuf.writeInt32(this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroInfo.CURRVERSION < cutVer)
  {
   cutVer = CSHeroInfo.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroInfo.CURRVERSION < cutVer)
  {
   cutVer = CSHeroInfo.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iHeroProtoId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iHeroProtoId]", "{0:d}", this.iHeroProtoId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


public class SCHeroInfo : tsf4g_csharp_interface
{
 /* public members */
 public CHeroSimpleInfo stHeroInfo;
 public byte[] szSkill; // skill level
 public CHeroAttr stHeroAttr; // hero 属性

 /* construct methods */
 public SCHeroInfo()
 {
  stHeroInfo = new CHeroSimpleInfo();
  szSkill = new byte[6];
  stHeroAttr = new CHeroAttr();
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCHeroInfo.CURRVERSION < cutVer)
  {
   cutVer = SCHeroInfo.CURRVERSION;
  }

  /* check cutversion */
  if (SCHeroInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.stHeroInfo */
  {
   ret = this.stHeroInfo.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.szSkill */
  {
   for (Int32 szSkill_i = 0; szSkill_i < 6; szSkill_i++)
   {
    ret = destBuf.writeUInt8(this.szSkill[szSkill_i]);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  /* pack member: this.stHeroAttr */
  {
   ret = this.stHeroAttr.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCHeroInfo.CURRVERSION < cutVer)
  {
   cutVer = SCHeroInfo.CURRVERSION;
  }

  /* check cutversion */
  if (SCHeroInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.stHeroInfo */
  {
   ret = this.stHeroInfo.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.szSkill */
  {
   for (Int32 szSkill_i = 0; szSkill_i < 6; szSkill_i++)
   {
    ret = srcBuf.readUInt8(ref this.szSkill[szSkill_i]);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  /* unpack member: this.stHeroAttr */
  {
   ret = this.stHeroAttr.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCHeroInfo.CURRVERSION < cutVer)
  {
   cutVer = SCHeroInfo.CURRVERSION;
  }

  /* check cutversion */
  if (SCHeroInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.stHeroInfo */
  {
   ret = this.stHeroInfo.load(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.szSkill */
  {
   for (Int32 szSkill_i = 0; szSkill_i < 6; szSkill_i++)
   {
    ret = srcBuf.readUInt8(ref this.szSkill[szSkill_i]);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  /* load member: this.stHeroAttr */
  {
   ret = this.stHeroAttr.load(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.stHeroInfo */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stHeroInfo]", true);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize children of this.stHeroInfo */
  if (0 > indent)
  {
   ret = this.stHeroInfo.visualize(ref destBuf, indent, separator);
  } else
  {
   ret = this.stHeroInfo.visualize(ref destBuf, indent + 1, separator);
  }
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.szSkill */
  ret = TdrBufUtil.printArray(ref destBuf, indent, separator, "[szSkill]", 6);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }
  for (Int32 szSkill_i = 0; szSkill_i < 6; szSkill_i++)
  {
   ret = destBuf.sprintf("0x{0:x2}", this.szSkill[szSkill_i]);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  ret = destBuf.sprintf("{0}",separator);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.stHeroAttr */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stHeroAttr]", true);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize children of this.stHeroAttr */
  if (0 > indent)
  {
   ret = this.stHeroAttr.visualize(ref destBuf, indent, separator);
  } else
  {
   ret = this.stHeroAttr.visualize(ref destBuf, indent + 1, separator);
  }
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 升级 */
public class CSHeroAddExp : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iHeroProtoId;
 public CSItemObj stItems;

 /* construct methods */
 public CSHeroAddExp()
 {
  stItems = new CSItemObj();
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroAddExp.CURRVERSION < cutVer)
  {
   cutVer = CSHeroAddExp.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroAddExp.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iHeroProtoId */
  {
   ret = destBuf.writeInt32(this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.stItems */
  {
   ret = this.stItems.pack(ref destBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroAddExp.CURRVERSION < cutVer)
  {
   cutVer = CSHeroAddExp.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroAddExp.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.stItems */
  {
   ret = this.stItems.unpack(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroAddExp.CURRVERSION < cutVer)
  {
   cutVer = CSHeroAddExp.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroAddExp.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.stItems */
  {
   ret = this.stItems.load(ref srcBuf, cutVer);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iHeroProtoId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iHeroProtoId]", "{0:d}", this.iHeroProtoId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.stItems */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[stItems]", true);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize children of this.stItems */
  if (0 > indent)
  {
   ret = this.stItems.visualize(ref destBuf, indent, separator);
  } else
  {
   ret = this.stItems.visualize(ref destBuf, indent + 1, separator);
  }
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 升品 */
public class CSHeroAddRank : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iHeroProtoId;
 public byte bRank; // 当前品质

 /* construct methods */
 public CSHeroAddRank()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroAddRank.CURRVERSION < cutVer)
  {
   cutVer = CSHeroAddRank.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroAddRank.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iHeroProtoId */
  {
   ret = destBuf.writeInt32(this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.bRank */
  {
   ret = destBuf.writeUInt8(this.bRank);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroAddRank.CURRVERSION < cutVer)
  {
   cutVer = CSHeroAddRank.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroAddRank.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.bRank */
  {
   ret = srcBuf.readUInt8(ref this.bRank);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroAddRank.CURRVERSION < cutVer)
  {
   cutVer = CSHeroAddRank.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroAddRank.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.bRank */
  {
   ret = srcBuf.readUInt8(ref this.bRank);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iHeroProtoId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iHeroProtoId]", "{0:d}", this.iHeroProtoId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.bRank */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bRank]", "0x{0:x2}", this.bRank);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 升星 */
public class CSHeroAddStar : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iHeroProtoId;
 public byte bStar; // 当前星级

 /* construct methods */
 public CSHeroAddStar()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroAddStar.CURRVERSION < cutVer)
  {
   cutVer = CSHeroAddStar.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroAddStar.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iHeroProtoId */
  {
   ret = destBuf.writeInt32(this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.bStar */
  {
   ret = destBuf.writeUInt8(this.bStar);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroAddStar.CURRVERSION < cutVer)
  {
   cutVer = CSHeroAddStar.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroAddStar.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.bStar */
  {
   ret = srcBuf.readUInt8(ref this.bStar);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroAddStar.CURRVERSION < cutVer)
  {
   cutVer = CSHeroAddStar.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroAddStar.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.bStar */
  {
   ret = srcBuf.readUInt8(ref this.bStar);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iHeroProtoId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iHeroProtoId]", "{0:d}", this.iHeroProtoId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.bStar */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bStar]", "0x{0:x2}", this.bStar);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 技能升级 */
public class CSHeroAddSkill : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iHeroProtoId;
 public byte bSkillIdx; // [1,GS_HERO_SKILL_NUM]
 public byte bSkillLv; // 当前技能等级

 /* construct methods */
 public CSHeroAddSkill()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroAddSkill.CURRVERSION < cutVer)
  {
   cutVer = CSHeroAddSkill.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroAddSkill.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iHeroProtoId */
  {
   ret = destBuf.writeInt32(this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.bSkillIdx */
  {
   ret = destBuf.writeUInt8(this.bSkillIdx);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.bSkillLv */
  {
   ret = destBuf.writeUInt8(this.bSkillLv);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroAddSkill.CURRVERSION < cutVer)
  {
   cutVer = CSHeroAddSkill.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroAddSkill.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.bSkillIdx */
  {
   ret = srcBuf.readUInt8(ref this.bSkillIdx);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.bSkillLv */
  {
   ret = srcBuf.readUInt8(ref this.bSkillLv);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroAddSkill.CURRVERSION < cutVer)
  {
   cutVer = CSHeroAddSkill.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroAddSkill.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.bSkillIdx */
  {
   ret = srcBuf.readUInt8(ref this.bSkillIdx);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.bSkillLv */
  {
   ret = srcBuf.readUInt8(ref this.bSkillLv);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iHeroProtoId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iHeroProtoId]", "{0:d}", this.iHeroProtoId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.bSkillIdx */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bSkillIdx]", "0x{0:x2}", this.bSkillIdx);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.bSkillLv */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bSkillLv]", "0x{0:x2}", this.bSkillLv);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 伙伴装备信息 */
public class CSEquipInfoList : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iHeroProtoId; // 伙伴原型表ID

 /* construct methods */
 public CSEquipInfoList()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSEquipInfoList.CURRVERSION < cutVer)
  {
   cutVer = CSEquipInfoList.CURRVERSION;
  }

  /* check cutversion */
  if (CSEquipInfoList.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iHeroProtoId */
  {
   ret = destBuf.writeInt32(this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSEquipInfoList.CURRVERSION < cutVer)
  {
   cutVer = CSEquipInfoList.CURRVERSION;
  }

  /* check cutversion */
  if (CSEquipInfoList.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSEquipInfoList.CURRVERSION < cutVer)
  {
   cutVer = CSEquipInfoList.CURRVERSION;
  }

  /* check cutversion */
  if (CSEquipInfoList.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iHeroProtoId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iHeroProtoId]", "{0:d}", this.iHeroProtoId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 装备信息 */
public class CEquipInfo : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iEquipProtoId; // 基础ID
 public Int32 iLevel; // 等级
 public Int32 iRank; // 阶
 public Int32 iStar; // 星
 public Int32 iExp; // 经验

 /* construct methods */
 public CEquipInfo()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CEquipInfo.CURRVERSION < cutVer)
  {
   cutVer = CEquipInfo.CURRVERSION;
  }

  /* check cutversion */
  if (CEquipInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iEquipProtoId */
  {
   ret = destBuf.writeInt32(this.iEquipProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iLevel */
  {
   ret = destBuf.writeInt32(this.iLevel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iRank */
  {
   ret = destBuf.writeInt32(this.iRank);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iStar */
  {
   ret = destBuf.writeInt32(this.iStar);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iExp */
  {
   ret = destBuf.writeInt32(this.iExp);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CEquipInfo.CURRVERSION < cutVer)
  {
   cutVer = CEquipInfo.CURRVERSION;
  }

  /* check cutversion */
  if (CEquipInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iEquipProtoId */
  {
   ret = srcBuf.readInt32(ref this.iEquipProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iLevel */
  {
   ret = srcBuf.readInt32(ref this.iLevel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iRank */
  {
   ret = srcBuf.readInt32(ref this.iRank);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iStar */
  {
   ret = srcBuf.readInt32(ref this.iStar);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iExp */
  {
   ret = srcBuf.readInt32(ref this.iExp);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CEquipInfo.CURRVERSION < cutVer)
  {
   cutVer = CEquipInfo.CURRVERSION;
  }

  /* check cutversion */
  if (CEquipInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iEquipProtoId */
  {
   ret = srcBuf.readInt32(ref this.iEquipProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iLevel */
  {
   ret = srcBuf.readInt32(ref this.iLevel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iRank */
  {
   ret = srcBuf.readInt32(ref this.iRank);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iStar */
  {
   ret = srcBuf.readInt32(ref this.iStar);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iExp */
  {
   ret = srcBuf.readInt32(ref this.iExp);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iEquipProtoId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iEquipProtoId]", "{0:d}", this.iEquipProtoId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iLevel */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iLevel]", "{0:d}", this.iLevel);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iRank */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iRank]", "{0:d}", this.iRank);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iStar */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iStar]", "{0:d}", this.iStar);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iExp */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iExp]", "{0:d}", this.iExp);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 装备信息 */
public class SCEquipInfoList : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iHeroProtoId; // 伙伴ID
 public CEquipInfo[] astEquipInfo; // 装备信息

 /* construct methods */
 public SCEquipInfoList()
 {
  astEquipInfo = new CEquipInfo[6];
  for (int astEquipInfo_i = 0; astEquipInfo_i < 6; astEquipInfo_i++)
  {
   astEquipInfo[astEquipInfo_i] = new CEquipInfo();
  }

 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCEquipInfoList.CURRVERSION < cutVer)
  {
   cutVer = SCEquipInfoList.CURRVERSION;
  }

  /* check cutversion */
  if (SCEquipInfoList.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iHeroProtoId */
  {
   ret = destBuf.writeInt32(this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.astEquipInfo */
  {
   for (Int32 astEquipInfo_i = 0; astEquipInfo_i < 6; astEquipInfo_i++)
   {
    ret = this.astEquipInfo[astEquipInfo_i].pack(ref destBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCEquipInfoList.CURRVERSION < cutVer)
  {
   cutVer = SCEquipInfoList.CURRVERSION;
  }

  /* check cutversion */
  if (SCEquipInfoList.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.astEquipInfo */
  {
   for (Int32 astEquipInfo_i = 0; astEquipInfo_i < 6; astEquipInfo_i++)
   {
    ret = this.astEquipInfo[astEquipInfo_i].unpack(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCEquipInfoList.CURRVERSION < cutVer)
  {
   cutVer = SCEquipInfoList.CURRVERSION;
  }

  /* check cutversion */
  if (SCEquipInfoList.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.astEquipInfo */
  {
   for (Int32 astEquipInfo_i = 0; astEquipInfo_i < 6; astEquipInfo_i++)
   {
    ret = this.astEquipInfo[astEquipInfo_i].load(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iHeroProtoId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iHeroProtoId]", "{0:d}", this.iHeroProtoId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.astEquipInfo */
  for (Int32 astEquipInfo_i = 0; astEquipInfo_i < 6; astEquipInfo_i++)
  {
   if (null == this.astEquipInfo[astEquipInfo_i])
   {
    continue;
   }

   ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[astEquipInfo]", astEquipInfo_i, true);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* visualize children of this.astEquipInfo[astEquipInfo_i] */
   if (0 > indent)
   {
    ret = this.astEquipInfo[astEquipInfo_i].visualize(ref destBuf, indent, separator);
   } else
   {
    ret = this.astEquipInfo[astEquipInfo_i].visualize(ref destBuf, indent + 1, separator);
   }
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 装备升级，下行为通用协议、装备信息协议、属性同步协议 */
public class CSEquipUpgrade : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iHeroProtoId; // 伙伴原型表ID
 public Int32 iPos; // 装备部位
 public Int32 iSrcAttrId; // 当前装备属性ID
 public Int32 iDstAttrId; // 升级后装备属性ID，可一键升级，后两个部位升级时，不够升级只加经验时，填SrcAttrId一样的值
 public CSItemObj[] astItems; // 道具

 /* construct methods */
 public CSEquipUpgrade()
 {
  astItems = new CSItemObj[4];
  for (int astItems_i = 0; astItems_i < 4; astItems_i++)
  {
   astItems[astItems_i] = new CSItemObj();
  }

 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSEquipUpgrade.CURRVERSION < cutVer)
  {
   cutVer = CSEquipUpgrade.CURRVERSION;
  }

  /* check cutversion */
  if (CSEquipUpgrade.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iHeroProtoId */
  {
   ret = destBuf.writeInt32(this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iPos */
  {
   ret = destBuf.writeInt32(this.iPos);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iSrcAttrId */
  {
   ret = destBuf.writeInt32(this.iSrcAttrId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iDstAttrId */
  {
   ret = destBuf.writeInt32(this.iDstAttrId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.astItems */
  {
   for (Int32 astItems_i = 0; astItems_i < 4; astItems_i++)
   {
    ret = this.astItems[astItems_i].pack(ref destBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSEquipUpgrade.CURRVERSION < cutVer)
  {
   cutVer = CSEquipUpgrade.CURRVERSION;
  }

  /* check cutversion */
  if (CSEquipUpgrade.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iPos */
  {
   ret = srcBuf.readInt32(ref this.iPos);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iSrcAttrId */
  {
   ret = srcBuf.readInt32(ref this.iSrcAttrId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iDstAttrId */
  {
   ret = srcBuf.readInt32(ref this.iDstAttrId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.astItems */
  {
   for (Int32 astItems_i = 0; astItems_i < 4; astItems_i++)
   {
    ret = this.astItems[astItems_i].unpack(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSEquipUpgrade.CURRVERSION < cutVer)
  {
   cutVer = CSEquipUpgrade.CURRVERSION;
  }

  /* check cutversion */
  if (CSEquipUpgrade.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iPos */
  {
   ret = srcBuf.readInt32(ref this.iPos);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iSrcAttrId */
  {
   ret = srcBuf.readInt32(ref this.iSrcAttrId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iDstAttrId */
  {
   ret = srcBuf.readInt32(ref this.iDstAttrId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.astItems */
  {
   for (Int32 astItems_i = 0; astItems_i < 4; astItems_i++)
   {
    ret = this.astItems[astItems_i].load(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iHeroProtoId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iHeroProtoId]", "{0:d}", this.iHeroProtoId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iPos */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iPos]", "{0:d}", this.iPos);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iSrcAttrId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iSrcAttrId]", "{0:d}", this.iSrcAttrId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iDstAttrId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iDstAttrId]", "{0:d}", this.iDstAttrId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.astItems */
  for (Int32 astItems_i = 0; astItems_i < 4; astItems_i++)
  {
   if (null == this.astItems[astItems_i])
   {
    continue;
   }

   ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[astItems]", astItems_i, true);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* visualize children of this.astItems[astItems_i] */
   if (0 > indent)
   {
    ret = this.astItems[astItems_i].visualize(ref destBuf, indent, separator);
   } else
   {
    ret = this.astItems[astItems_i].visualize(ref destBuf, indent + 1, separator);
   }
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 装备升阶，下行为通用协议、装备信息协议 */
public class CSEquipAdvance : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iHeroProtoId; // 伙伴原型表ID
 public Int32 iPos; // 装备部位
 public Int32 iRankId; // 当前装备进阶ID

 /* construct methods */
 public CSEquipAdvance()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSEquipAdvance.CURRVERSION < cutVer)
  {
   cutVer = CSEquipAdvance.CURRVERSION;
  }

  /* check cutversion */
  if (CSEquipAdvance.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iHeroProtoId */
  {
   ret = destBuf.writeInt32(this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iPos */
  {
   ret = destBuf.writeInt32(this.iPos);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iRankId */
  {
   ret = destBuf.writeInt32(this.iRankId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSEquipAdvance.CURRVERSION < cutVer)
  {
   cutVer = CSEquipAdvance.CURRVERSION;
  }

  /* check cutversion */
  if (CSEquipAdvance.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iPos */
  {
   ret = srcBuf.readInt32(ref this.iPos);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iRankId */
  {
   ret = srcBuf.readInt32(ref this.iRankId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSEquipAdvance.CURRVERSION < cutVer)
  {
   cutVer = CSEquipAdvance.CURRVERSION;
  }

  /* check cutversion */
  if (CSEquipAdvance.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iPos */
  {
   ret = srcBuf.readInt32(ref this.iPos);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iRankId */
  {
   ret = srcBuf.readInt32(ref this.iRankId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iHeroProtoId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iHeroProtoId]", "{0:d}", this.iHeroProtoId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iPos */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iPos]", "{0:d}", this.iPos);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iRankId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iRankId]", "{0:d}", this.iRankId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 装备精炼升星，下行为通用协议、装备信息协议、属性同步协议、技能相关协议 */
public class CSEquipRefine : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iHeroProtoId; // 伙伴原型表ID
 public Int32 iPos; // 装备部位
 public Int32 iRefineId; // 当前装备精炼ID

 /* construct methods */
 public CSEquipRefine()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSEquipRefine.CURRVERSION < cutVer)
  {
   cutVer = CSEquipRefine.CURRVERSION;
  }

  /* check cutversion */
  if (CSEquipRefine.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iHeroProtoId */
  {
   ret = destBuf.writeInt32(this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iPos */
  {
   ret = destBuf.writeInt32(this.iPos);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iRefineId */
  {
   ret = destBuf.writeInt32(this.iRefineId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSEquipRefine.CURRVERSION < cutVer)
  {
   cutVer = CSEquipRefine.CURRVERSION;
  }

  /* check cutversion */
  if (CSEquipRefine.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iPos */
  {
   ret = srcBuf.readInt32(ref this.iPos);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iRefineId */
  {
   ret = srcBuf.readInt32(ref this.iRefineId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSEquipRefine.CURRVERSION < cutVer)
  {
   cutVer = CSEquipRefine.CURRVERSION;
  }

  /* check cutversion */
  if (CSEquipRefine.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iPos */
  {
   ret = srcBuf.readInt32(ref this.iPos);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iRefineId */
  {
   ret = srcBuf.readInt32(ref this.iRefineId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iHeroProtoId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iHeroProtoId]", "{0:d}", this.iHeroProtoId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iPos */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iPos]", "{0:d}", this.iPos);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iRefineId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iRefineId]", "{0:d}", this.iRefineId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 装备降星，下行为通用协议、装备信息协议、属性同步协议、包裹协议 */
public class CSEquipDeRefine : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iHeroProtoId; // 伙伴原型表ID
 public Int32 iPos; // 装备部位
 public Int32 iRefineId; // 当前装备精炼ID

 /* construct methods */
 public CSEquipDeRefine()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSEquipDeRefine.CURRVERSION < cutVer)
  {
   cutVer = CSEquipDeRefine.CURRVERSION;
  }

  /* check cutversion */
  if (CSEquipDeRefine.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iHeroProtoId */
  {
   ret = destBuf.writeInt32(this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iPos */
  {
   ret = destBuf.writeInt32(this.iPos);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iRefineId */
  {
   ret = destBuf.writeInt32(this.iRefineId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSEquipDeRefine.CURRVERSION < cutVer)
  {
   cutVer = CSEquipDeRefine.CURRVERSION;
  }

  /* check cutversion */
  if (CSEquipDeRefine.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iPos */
  {
   ret = srcBuf.readInt32(ref this.iPos);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iRefineId */
  {
   ret = srcBuf.readInt32(ref this.iRefineId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSEquipDeRefine.CURRVERSION < cutVer)
  {
   cutVer = CSEquipDeRefine.CURRVERSION;
  }

  /* check cutversion */
  if (CSEquipDeRefine.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iPos */
  {
   ret = srcBuf.readInt32(ref this.iPos);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iRefineId */
  {
   ret = srcBuf.readInt32(ref this.iRefineId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iHeroProtoId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iHeroProtoId]", "{0:d}", this.iHeroProtoId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iPos */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iPos]", "{0:d}", this.iPos);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iRefineId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iRefineId]", "{0:d}", this.iRefineId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 伙伴战魂信息 */
public class CSSoulInfo : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iHeroProtoId; // 伙伴原型表ID

 /* construct methods */
 public CSSoulInfo()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSSoulInfo.CURRVERSION < cutVer)
  {
   cutVer = CSSoulInfo.CURRVERSION;
  }

  /* check cutversion */
  if (CSSoulInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iHeroProtoId */
  {
   ret = destBuf.writeInt32(this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSSoulInfo.CURRVERSION < cutVer)
  {
   cutVer = CSSoulInfo.CURRVERSION;
  }

  /* check cutversion */
  if (CSSoulInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSSoulInfo.CURRVERSION < cutVer)
  {
   cutVer = CSSoulInfo.CURRVERSION;
  }

  /* check cutversion */
  if (CSSoulInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iHeroProtoId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iHeroProtoId]", "{0:d}", this.iHeroProtoId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 战魂信息 */
public class SoulObj : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iLevel; // 等级
 public Int32 iExp; // 经验

 /* construct methods */
 public SoulObj()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SoulObj.CURRVERSION < cutVer)
  {
   cutVer = SoulObj.CURRVERSION;
  }

  /* check cutversion */
  if (SoulObj.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iLevel */
  {
   ret = destBuf.writeInt32(this.iLevel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iExp */
  {
   ret = destBuf.writeInt32(this.iExp);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SoulObj.CURRVERSION < cutVer)
  {
   cutVer = SoulObj.CURRVERSION;
  }

  /* check cutversion */
  if (SoulObj.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iLevel */
  {
   ret = srcBuf.readInt32(ref this.iLevel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iExp */
  {
   ret = srcBuf.readInt32(ref this.iExp);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SoulObj.CURRVERSION < cutVer)
  {
   cutVer = SoulObj.CURRVERSION;
  }

  /* check cutversion */
  if (SoulObj.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iLevel */
  {
   ret = srcBuf.readInt32(ref this.iLevel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iExp */
  {
   ret = srcBuf.readInt32(ref this.iExp);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iLevel */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iLevel]", "{0:d}", this.iLevel);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iExp */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iExp]", "{0:d}", this.iExp);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


public class SCSoulInfo : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iHeroProtoId;
 public SoulObj[] astSoulObj;

 /* construct methods */
 public SCSoulInfo()
 {
  astSoulObj = new SoulObj[4];
  for (int astSoulObj_i = 0; astSoulObj_i < 4; astSoulObj_i++)
  {
   astSoulObj[astSoulObj_i] = new SoulObj();
  }

 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCSoulInfo.CURRVERSION < cutVer)
  {
   cutVer = SCSoulInfo.CURRVERSION;
  }

  /* check cutversion */
  if (SCSoulInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iHeroProtoId */
  {
   ret = destBuf.writeInt32(this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.astSoulObj */
  {
   for (Int32 astSoulObj_i = 0; astSoulObj_i < 4; astSoulObj_i++)
   {
    ret = this.astSoulObj[astSoulObj_i].pack(ref destBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCSoulInfo.CURRVERSION < cutVer)
  {
   cutVer = SCSoulInfo.CURRVERSION;
  }

  /* check cutversion */
  if (SCSoulInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.astSoulObj */
  {
   for (Int32 astSoulObj_i = 0; astSoulObj_i < 4; astSoulObj_i++)
   {
    ret = this.astSoulObj[astSoulObj_i].unpack(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || SCSoulInfo.CURRVERSION < cutVer)
  {
   cutVer = SCSoulInfo.CURRVERSION;
  }

  /* check cutversion */
  if (SCSoulInfo.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.astSoulObj */
  {
   for (Int32 astSoulObj_i = 0; astSoulObj_i < 4; astSoulObj_i++)
   {
    ret = this.astSoulObj[astSoulObj_i].load(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iHeroProtoId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iHeroProtoId]", "{0:d}", this.iHeroProtoId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.astSoulObj */
  for (Int32 astSoulObj_i = 0; astSoulObj_i < 4; astSoulObj_i++)
  {
   if (null == this.astSoulObj[astSoulObj_i])
   {
    continue;
   }

   ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[astSoulObj]", astSoulObj_i, true);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* visualize children of this.astSoulObj[astSoulObj_i] */
   if (0 > indent)
   {
    ret = this.astSoulObj[astSoulObj_i].visualize(ref destBuf, indent, separator);
   } else
   {
    ret = this.astSoulObj[astSoulObj_i].visualize(ref destBuf, indent + 1, separator);
   }
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 战魂升级 */
public class CSHeroSoulAddExp : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iHeroProtoId;
 public byte bSoulIdx; // [1,GS_HERO_SOUL_NUM]
 public UInt16 wItemNum;
 public CSItemObj[] astItems;

 /* construct methods */
 public CSHeroSoulAddExp()
 {
  astItems = new CSItemObj[1000];
  for (int astItems_i = 0; astItems_i < 1000; astItems_i++)
  {
   astItems[astItems_i] = new CSItemObj();
  }

 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroSoulAddExp.CURRVERSION < cutVer)
  {
   cutVer = CSHeroSoulAddExp.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroSoulAddExp.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iHeroProtoId */
  {
   ret = destBuf.writeInt32(this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.bSoulIdx */
  {
   ret = destBuf.writeUInt8(this.bSoulIdx);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.wItemNum */
  {
   ret = destBuf.writeUInt16(this.wItemNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.astItems */
  {
   if (1000 < this.wItemNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
   }

   if (this.astItems.Length < this.wItemNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_VAR_ARRAY_CONFLICT;
   }

   for (Int32 astItems_i = 0; astItems_i < this.wItemNum; astItems_i++)
   {
    ret = this.astItems[astItems_i].pack(ref destBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroSoulAddExp.CURRVERSION < cutVer)
  {
   cutVer = CSHeroSoulAddExp.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroSoulAddExp.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.bSoulIdx */
  {
   ret = srcBuf.readUInt8(ref this.bSoulIdx);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.wItemNum */
  {
   ret = srcBuf.readUInt16(ref this.wItemNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.astItems */
  {
   if (1000 < this.wItemNum)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
   }

   {
    this.astItems = new CSItemObj[this.wItemNum];
    for (Int32 astItems_i = 0; astItems_i < this.wItemNum; astItems_i++)
    {
     this.astItems[astItems_i] = new CSItemObj();
    }
   }

   for (Int32 astItems_i = 0; astItems_i < this.wItemNum; astItems_i++)
   {
    ret = this.astItems[astItems_i].unpack(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroSoulAddExp.CURRVERSION < cutVer)
  {
   cutVer = CSHeroSoulAddExp.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroSoulAddExp.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.bSoulIdx */
  {
   ret = srcBuf.readUInt8(ref this.bSoulIdx);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.wItemNum */
  {
   ret = srcBuf.readUInt16(ref this.wItemNum);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.astItems */
  {
   if (this.astItems.Length < 1000)
   {
    this.astItems = new CSItemObj[1000];
    for (Int32 astItems_i = 0; astItems_i < 1000; astItems_i++)
    {
     this.astItems[astItems_i] = new CSItemObj();
    }
   }

   for (Int32 astItems_i = 0; astItems_i < 1000; astItems_i++)
   {
    ret = this.astItems[astItems_i].load(ref srcBuf, cutVer);
    if (TdrError.ErrorType.TDR_NO_ERROR != ret)
    {
#if (DEBUG)
     TdrDebug.tdrTrace();
#endif
     return ret;
    }
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iHeroProtoId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iHeroProtoId]", "{0:d}", this.iHeroProtoId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.bSoulIdx */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bSoulIdx]", "0x{0:x2}", this.bSoulIdx);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.wItemNum */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[wItemNum]", "{0:d}", this.wItemNum);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.astItems */
  if (1000 < this.wItemNum)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_REFER_SURPASS_COUNT;
  }
  for (Int32 astItems_i = 0; astItems_i < this.wItemNum; astItems_i++)
  {
   if (null == this.astItems[astItems_i])
   {
    continue;
   }

   ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[astItems]", astItems_i, true);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }

   /* visualize children of this.astItems[astItems_i] */
   if (0 > indent)
   {
    ret = this.astItems[astItems_i].visualize(ref destBuf, indent, separator);
   } else
   {
    ret = this.astItems[astItems_i].visualize(ref destBuf, indent + 1, separator);
   }
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


/* 钻石购买战魂升级 */
public class CSHeroSoulBuyExp : tsf4g_csharp_interface
{
 /* public members */
 public Int32 iHeroProtoId;
 public byte bSoulIdx; // [1,GS_HERO_SOUL_NUM]
 public Int32 iNextLevel; // 下一等级

 /* construct methods */
 public CSHeroSoulBuyExp()
 {
 }

 /* public methods */
 public TdrError.ErrorType construct()
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* no need to  set defaultvalue */

  return ret;
 }


#if (TSF4G_TDR_NO_PACK)
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_PACK
 public TdrError.ErrorType pack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || (size > buffer.GetLength(0)))
  {
      return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrWriteBuf destBuf = new TdrWriteBuf(ref buffer, size);
  TdrError.ErrorType ret = pack(ref destBuf, cutVer);
  if (ret == TdrError.ErrorType.TDR_NO_ERROR)
  {
   buffer = destBuf.getBeginPtr();

   usedSize = destBuf.getUsedSize();
  }

  return ret;
 }

 public TdrError.ErrorType pack(ref TdrWriteBuf destBuf,  uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroSoulBuyExp.CURRVERSION < cutVer)
  {
   cutVer = CSHeroSoulBuyExp.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroSoulBuyExp.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* pack member: this.iHeroProtoId */
  {
   ret = destBuf.writeInt32(this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.bSoulIdx */
  {
   ret = destBuf.writeUInt8(this.bSoulIdx);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* pack member: this.iNextLevel */
  {
   ret = destBuf.writeInt32(this.iNextLevel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_PACK


#if (TSF4G_TDR_NO_UNPACK)
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_UNPACK
 public TdrError.ErrorType unpack(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = unpack(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType unpack(ref TdrReadBuf srcBuf, uint cutVer)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroSoulBuyExp.CURRVERSION < cutVer)
  {
   cutVer = CSHeroSoulBuyExp.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroSoulBuyExp.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* unpack member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.bSoulIdx */
  {
   ret = srcBuf.readUInt8(ref this.bSoulIdx);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* unpack member: this.iNextLevel */
  {
   ret = srcBuf.readInt32(ref this.iNextLevel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_UNPACK


#if (TSF4G_TDR_NO_LOAD)
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_LOAD
 public TdrError.ErrorType load(ref byte[] buffer, int size, ref int usedSize , uint cutVer)
 {
  if (null == buffer || 0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = load(ref srcBuf, cutVer);

  usedSize = srcBuf.getUsedSize();

  return ret;
 }

 public TdrError.ErrorType load(ref TdrReadBuf srcBuf, uint cutVer)
 {
  srcBuf.disableEndian();
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* adjust cutversion */
  if (0 == cutVer || CSHeroSoulBuyExp.CURRVERSION < cutVer)
  {
   cutVer = CSHeroSoulBuyExp.CURRVERSION;
  }

  /* check cutversion */
  if (CSHeroSoulBuyExp.BASEVERSION > cutVer)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_CUTVER_TOO_SMALL;
  }

  /* load member: this.iHeroProtoId */
  {
   ret = srcBuf.readInt32(ref this.iHeroProtoId);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.bSoulIdx */
  {
   ret = srcBuf.readUInt8(ref this.bSoulIdx);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  /* load member: this.iNextLevel */
  {
   ret = srcBuf.readInt32(ref this.iNextLevel);
   if (TdrError.ErrorType.TDR_NO_ERROR != ret)
   {
#if (DEBUG)
    TdrDebug.tdrTrace();
#endif
    return ret;
   }
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_LOAD


#if (TSF4G_TDR_NO_VISUALIZE)
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_VISUALIZE
 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref string buffer, int indent, char separator)
 {
  TdrVisualBuf destBuf = new TdrVisualBuf();
  TdrError.ErrorType ret = visualize(ref destBuf, indent, separator);

  buffer = destBuf.getVisualBuf();

  return ret;
 }

 /* set indent = -1 to disable indent , default: separator = '\n' */
 public TdrError.ErrorType visualize(ref TdrVisualBuf destBuf, int indent, char separator)
 {
  TdrError.ErrorType ret = TdrError.ErrorType.TDR_NO_ERROR;

  /* visualize member: this.iHeroProtoId */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iHeroProtoId]", "{0:d}", this.iHeroProtoId);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.bSoulIdx */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[bSoulIdx]", "0x{0:x2}", this.bSoulIdx);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  /* visualize member: this.iNextLevel */
  ret = TdrBufUtil.printVariable(ref destBuf, indent, separator, "[iNextLevel]", "{0:d}", this.iNextLevel);
  if (TdrError.ErrorType.TDR_NO_ERROR != ret)
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return ret;
  }

  return ret;
 }
#endif  // TSF4G_TDR_NO_VISUALIZE


#if (TSF4G_TDR_NO_GETSIZEINFO)
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
#if (DEBUG)
  TdrDebug.tdrTrace();
#endif
  return TdrError.ErrorType.TDR_ERR_METHOD_NOT_IMPLEMENTED;
 }
#else  // TSF4G_TDR_NO_GETSIZEINFO
 public TdrError.ErrorType getSizeInfo(byte[] buffer, int size, ref uint sizeInfo)
 {
  if (0 == buffer.GetLength(0) || size > buffer.GetLength(0))
  {
#if (DEBUG)
   TdrDebug.tdrTrace();
#endif
   return TdrError.ErrorType.TDR_ERR_INVALID_BUFFER_PARAMETER;
  }

  TdrReadBuf srcBuf = new TdrReadBuf(ref buffer, size);
  TdrError.ErrorType ret = getSizeInfo(srcBuf, ref sizeInfo);

  return ret;
 }

 public TdrError.ErrorType getSizeInfo(TdrReadBuf srcBuf, ref uint sizeInfo)
 {
  return TdrError.ErrorType.TDR_ERR_HAVE_NOT_SET_SIZEINFO;
 }
#endif  // TSF4G_TDR_NO_GETSIZEINFO

 /* meta version info */
 public static readonly uint BASEVERSION = 1;
 public static readonly uint CURRVERSION = 1;
 /* entry version info */

 /* length of string or wstring */
}


}
