//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18063
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Collections;

public class BaseDataFactory
{
	private Dictionary<Type,AbstractData> m_modelList;

	
	public BaseDataFactory ()
	{
        m_modelList = new Dictionary<Type, AbstractData>();
	}

    public void Dispose()
    {
        DestoryAllObj();
    }

    public void Clear()
    {
        foreach (Type t in m_modelList.Keys) {
            m_modelList[t].Clear();
		}
    }

	/// <summary>
	/// 初始化
	/// </summary>
	public void Init()
	{

	}
	
	/// <summary>
	/// 销毁对象
	/// </summary>
	/// <typeparam name="T">The 1st type parameter.</typeparam>
	public void DestoryObj<T>()
	{
		m_modelList [typeof(T)].Dispose ();
        m_modelList[typeof(T)] = null;
		m_modelList.Remove (typeof(T));
	}
	
	/// <summary>
	/// 销毁所有对象
	/// </summary>
	public void DestoryAllObj()
	{
		foreach (Type t in m_modelList.Keys) {
			m_modelList [t].Dispose ();
            m_modelList[t] = null;
		}
        m_modelList.Clear();
	}
	
	/// <summary>
	/// 创建模块
	/// </summary>
	/// <typeparam name="T">The 1st type parameter.</typeparam>
    protected T Creator<T>() where T : AbstractData
	{
        T obj = null;
        if (!m_modelList.ContainsKey(typeof(T)))
        {
            obj = System.Activator.CreateInstance(typeof(T)) as T;
            m_modelList[typeof(T)] = obj;
            (obj as IModuleCenter).Setup(null, this, null);
        }
        else
        {
            obj = m_modelList[typeof(T)] as T;
        }
        return obj;
	}
}